//
//  Picasso_1.swift
//  UI Design 1
//
//  Created on Mar 18, 2020.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Picasso_1: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawIPhoneXS(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Landscape
        // Warning: New symbols are not supported.
        
        /// Portrait
        // Warning: New symbols are not supported.
        
        /// Cityscape
        // Warning: New symbols are not supported.
        
        /// still-life
        // Warning: New symbols are not supported.
        
        /// Nature
        // Warning: New symbols are not supported.
        
        /// Tags
        // Warning: New symbols are not supported.
        
        /// Tags Copy 2
        // Warning: New symbols are not supported.
        
        /// 20478
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawSave(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 392, y: 0))
        rectangle.addLine(to: CGPoint(x: 392, y: 890))
        rectangle.addLine(to: CGPoint(x: 0, y: 890))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: -8, y: -30)
        rectangle.usesEvenOddFillRule = true
        UIColor.black.setFill()
        rectangle.fill()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: -0, y: 300)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 212))
            mask.addLine(to: CGPoint(x: 0, y: 212))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            context.saveGState()
            mask.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// 68088878ad9413bb3722953604a222f8
            // Warning: Image layers are not supported.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: -8, y: 715)
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint.zero)
            rectangle2.addLine(to: CGPoint(x: 401, y: 0))
            rectangle2.addLine(to: CGPoint(x: 401, y: 114))
            rectangle2.addLine(to: CGPoint(x: 0, y: 114))
            rectangle2.addLine(to: CGPoint.zero)
            rectangle2.close()
            context.saveGState()
            rectangle2.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle2.fill()
            rectangle2.lineWidth = 1
            UIColor(white: 0.502, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            
            /// BottomBar 2
            let bottomBar2 = UIBezierPath()
            bottomBar2.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar2.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar2.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar2.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar2.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar2.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar2.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar2.close()
            context.saveGState()
            context.translateBy(x: 125, y: 85)
            bottomBar2.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar2.fill()
            context.restoreGState()
            
            /// icons8_sun_50px
            // Warning: Image layers are not supported.
            
            /// icons8_sun_50px
            // Warning: Image layers are not supported.
            
            /// icons8_sun_50px
            // Warning: Image layers are not supported.
            
            /// icons8_last_quarter_50px
            // Warning: Image layers are not supported.
            
            /// icons8_last_quarter_50px
            // Warning: Image layers are not supported.
            
            /// icons8_last_quarter_50px
            // Warning: Image layers are not supported.
            
            /// icons8_triangle_arrow_50px
            // Warning: Image layers are not supported.
            
            /// icons8_triangle_arrow_50px
            // Warning: Image layers are not supported.
            
            /// icons8_triangle_arrow_50px
            // Warning: Image layers are not supported.
            
            /// icons8_thermometer_50px
            // Warning: Image layers are not supported.
            
            /// icons8_thermometer_50px
            // Warning: Image layers are not supported.
            
            /// icons8_thermometer_50px
            // Warning: Image layers are not supported.
            
            /// icons8_drop_of_blood_50px
            // Warning: Image layers are not supported.
            
            /// icons8_drop_of_blood_50px
            // Warning: Image layers are not supported.
            
            /// icons8_drop_of_blood_50px
            // Warning: Image layers are not supported.
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 36, y: 13)
                
                /// icons8_plus_minus_50px
                // Warning: Image layers are not supported.
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 12.5))
                ellipse.addCurve(to: CGPoint(x: 12.5, y: 0), controlPoint1: CGPoint(x: 0, y: 5.6), controlPoint2: CGPoint(x: 5.6, y: 0))
                ellipse.addCurve(to: CGPoint(x: 25, y: 12.5), controlPoint1: CGPoint(x: 19.4, y: 0), controlPoint2: CGPoint(x: 25, y: 5.6))
                ellipse.addCurve(to: CGPoint(x: 12.5, y: 25), controlPoint1: CGPoint(x: 25, y: 19.4), controlPoint2: CGPoint(x: 19.4, y: 25))
                ellipse.addCurve(to: CGPoint(x: 0, y: 12.5), controlPoint1: CGPoint(x: 5.6, y: 25), controlPoint2: CGPoint(x: 0, y: 19.4))
                ellipse.close()
                context.saveGState()
                ellipse.lineWidth = 2
                UIColor.white.setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Sharpen
            let sharpen = NSMutableAttributedString(string: "Sharpen")
            sharpen.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: sharpen.length))
            sharpen.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: sharpen.length))
            context.saveGState()
            sharpen.draw(in: CGRect(x: 327, y: 42, width: 44, height: 13))
            context.restoreGState()
            
            /// White Balance
            let whiteBalance = NSMutableAttributedString(string: "White Balance")
            whiteBalance.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: whiteBalance.length))
            whiteBalance.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: whiteBalance.length))
            context.saveGState()
            whiteBalance.draw(in: CGRect(x: 243, y: 42, width: 62, height: 13))
            context.restoreGState()
            
            /// Saturation
            let saturation = NSMutableAttributedString(string: "Saturation")
            saturation.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: saturation.length))
            saturation.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: saturation.length))
            context.saveGState()
            saturation.draw(in: CGRect(x: 175, y: 42, width: 43, height: 13))
            context.restoreGState()
            
            /// Brightness
            let brightness = NSMutableAttributedString(string: "Brightness")
            brightness.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: brightness.length))
            brightness.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: brightness.length))
            context.saveGState()
            brightness.draw(in: CGRect(x: 101, y: 42, width: 45, height: 13))
            context.restoreGState()
            
            /// Contrast Adds
            let contrastAdds = NSMutableAttributedString(string: "Contrast Adds")
            contrastAdds.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: contrastAdds.length))
            contrastAdds.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: contrastAdds.length))
            context.saveGState()
            contrastAdds.draw(in: CGRect(x: 32, y: 42, width: 34, height: 13))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// icons8_sun_50px
        // Warning: Image layers are not supported.
        
        /// icons8_drop_of_blood_50px
        // Warning: Image layers are not supported.
        
        /// icons8_sun_50px
        // Warning: Image layers are not supported.
        
        /// icons8_drop_of_blood_50px
        // Warning: Image layers are not supported.
        
        /// Meter
        do {
            context.saveGState()
            context.translateBy(x: 3, y: 676)
            
            /// New shape Copy 17
            let newShapeCopy17 = UIBezierPath()
            newShapeCopy17.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy17.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 168, y: 9.91)
            newShapeCopy17.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy17.stroke()
            context.restoreGState()
            
            /// New shape Copy 18
            let newShapeCopy18 = UIBezierPath()
            newShapeCopy18.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy18.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 156, y: 9.91)
            newShapeCopy18.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy18.stroke()
            context.restoreGState()
            
            /// New shape Copy 19
            let newShapeCopy19 = UIBezierPath()
            newShapeCopy19.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy19.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 144, y: 9.91)
            newShapeCopy19.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy19.stroke()
            context.restoreGState()
            
            /// New shape Copy 20
            let newShapeCopy20 = UIBezierPath()
            newShapeCopy20.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy20.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 132, y: 9.91)
            newShapeCopy20.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy20.stroke()
            context.restoreGState()
            
            /// New shape Copy 21
            let newShapeCopy21 = UIBezierPath()
            newShapeCopy21.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy21.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 120, y: 9.91)
            newShapeCopy21.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy21.stroke()
            context.restoreGState()
            
            /// New shape Copy 22
            let newShapeCopy22 = UIBezierPath()
            newShapeCopy22.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy22.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 108, y: 9.91)
            newShapeCopy22.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy22.stroke()
            context.restoreGState()
            
            /// New shape Copy 23
            let newShapeCopy23 = UIBezierPath()
            newShapeCopy23.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy23.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 96, y: 9.91)
            newShapeCopy23.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy23.stroke()
            context.restoreGState()
            
            /// New shape Copy 24
            let newShapeCopy24 = UIBezierPath()
            newShapeCopy24.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy24.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 84, y: 9.91)
            newShapeCopy24.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy24.stroke()
            context.restoreGState()
            
            /// New shape Copy 25
            let newShapeCopy25 = UIBezierPath()
            newShapeCopy25.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy25.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 72, y: 9.91)
            newShapeCopy25.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy25.stroke()
            context.restoreGState()
            
            /// New shape Copy 26
            let newShapeCopy26 = UIBezierPath()
            newShapeCopy26.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy26.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 60, y: 9.91)
            newShapeCopy26.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy26.stroke()
            context.restoreGState()
            
            /// New shape Copy 27
            let newShapeCopy27 = UIBezierPath()
            newShapeCopy27.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy27.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 48, y: 9.91)
            newShapeCopy27.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy27.stroke()
            context.restoreGState()
            
            /// New shape Copy 28
            let newShapeCopy28 = UIBezierPath()
            newShapeCopy28.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy28.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 36, y: 9.91)
            newShapeCopy28.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy28.stroke()
            context.restoreGState()
            
            /// New shape Copy 29
            let newShapeCopy29 = UIBezierPath()
            newShapeCopy29.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy29.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 24, y: 9.91)
            newShapeCopy29.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy29.stroke()
            context.restoreGState()
            
            /// New shape Copy 30
            let newShapeCopy30 = UIBezierPath()
            newShapeCopy30.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy30.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 12, y: 9.91)
            newShapeCopy30.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy30.stroke()
            context.restoreGState()
            
            /// New shape Copy 31
            let newShapeCopy31 = UIBezierPath()
            newShapeCopy31.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy31.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 0, y: 9.91)
            newShapeCopy31.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy31.stroke()
            context.restoreGState()
            
            /// New shape Copy 9
            let newShapeCopy9 = UIBezierPath()
            newShapeCopy9.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy9.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 370, y: 9.91)
            newShapeCopy9.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy9.stroke()
            context.restoreGState()
            
            /// New shape Copy 10
            let newShapeCopy10 = UIBezierPath()
            newShapeCopy10.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy10.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 358, y: 9.91)
            newShapeCopy10.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy10.stroke()
            context.restoreGState()
            
            /// New shape Copy 11
            let newShapeCopy11 = UIBezierPath()
            newShapeCopy11.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy11.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 346, y: 9.91)
            newShapeCopy11.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy11.stroke()
            context.restoreGState()
            
            /// New shape Copy 12
            let newShapeCopy12 = UIBezierPath()
            newShapeCopy12.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy12.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 334, y: 9.91)
            newShapeCopy12.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy12.stroke()
            context.restoreGState()
            
            /// New shape Copy 13
            let newShapeCopy13 = UIBezierPath()
            newShapeCopy13.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy13.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 322, y: 9.91)
            newShapeCopy13.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy13.stroke()
            context.restoreGState()
            
            /// New shape Copy 14
            let newShapeCopy14 = UIBezierPath()
            newShapeCopy14.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy14.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 310, y: 9.91)
            newShapeCopy14.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy14.stroke()
            context.restoreGState()
            
            /// New shape Copy 15
            let newShapeCopy15 = UIBezierPath()
            newShapeCopy15.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy15.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 298, y: 9.91)
            newShapeCopy15.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy15.stroke()
            context.restoreGState()
            
            /// New shape Copy 16
            let newShapeCopy16 = UIBezierPath()
            newShapeCopy16.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy16.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 286, y: 9.91)
            newShapeCopy16.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy16.stroke()
            context.restoreGState()
            
            /// New shape Copy 5
            let newShapeCopy5 = UIBezierPath()
            newShapeCopy5.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy5.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 274, y: 9.91)
            newShapeCopy5.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy5.stroke()
            context.restoreGState()
            
            /// New shape Copy 6
            let newShapeCopy6 = UIBezierPath()
            newShapeCopy6.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy6.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 262, y: 9.91)
            newShapeCopy6.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy6.stroke()
            context.restoreGState()
            
            /// New shape Copy 7
            let newShapeCopy7 = UIBezierPath()
            newShapeCopy7.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy7.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 250, y: 9.91)
            newShapeCopy7.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy7.stroke()
            context.restoreGState()
            
            /// New shape Copy 8
            let newShapeCopy8 = UIBezierPath()
            newShapeCopy8.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy8.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 238, y: 9.91)
            newShapeCopy8.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy8.stroke()
            context.restoreGState()
            
            /// New shape Copy 4
            let newShapeCopy4 = UIBezierPath()
            newShapeCopy4.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy4.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 226, y: 9.91)
            newShapeCopy4.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy4.stroke()
            context.restoreGState()
            
            /// New shape Copy 3
            let newShapeCopy3 = UIBezierPath()
            newShapeCopy3.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy3.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 214, y: 9.91)
            newShapeCopy3.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy3.stroke()
            context.restoreGState()
            
            /// New shape Copy 2
            let newShapeCopy2 = UIBezierPath()
            newShapeCopy2.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy2.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 202, y: 9.91)
            newShapeCopy2.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy2.stroke()
            context.restoreGState()
            
            /// New shape Copy
            let newShapeCopy = UIBezierPath()
            newShapeCopy.move(to: CGPoint(x: 0, y: 11.17))
            newShapeCopy.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 190, y: 9.91)
            newShapeCopy.lineWidth = 0.5
            UIColor(white: 0.788, alpha: 1).setStroke()
            newShapeCopy.stroke()
            context.restoreGState()
            
            /// New shape
            let newShape = UIBezierPath()
            newShape.move(to: CGPoint(x: 0, y: 29))
            newShape.addLine(to: CGPoint.zero)
            context.saveGState()
            context.translateBy(x: 178, y: 0)
            newShape.lineWidth = 1
            UIColor(hue: 1, saturation: 0.481, brightness: 0.945, alpha: 1).setStroke()
            newShape.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Done
        let done = NSMutableAttributedString(string: "Done")
        done.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: done.length))
        done.addAttribute(.kern, value: 1, range: NSRange(location: 0, length: done.length))
        done.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: done.length))
        context.saveGState()
        done.draw(in: CGRect(x: 330, y: 15, width: 80, height: 26))
        context.restoreGState()
        
        /// Revert
        let revert = NSMutableAttributedString(string: "Revert")
        revert.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: revert.length))
        revert.addAttribute(.kern, value: 1, range: NSRange(location: 0, length: revert.length))
        revert.addAttribute(.foregroundColor, value: UIColor(hue: 1, saturation: 0.435, brightness: 1, alpha: 1), range: NSRange(location: 0, length: revert.length))
        context.saveGState()
        revert.draw(in: CGRect(x: 251, y: 15, width: 80, height: 26))
        context.restoreGState()
        
        /// TopBar Copy 2
        do {
            context.saveGState()
            context.translateBy(x: 168, y: 15)
            
            /// Rectangle 2
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint(x: 6, y: 0))
            rectangle3.addLine(to: CGPoint(x: 61, y: 0))
            rectangle3.addCurve(to: CGPoint(x: 67, y: 6), controlPoint1: CGPoint(x: 64.31, y: 0), controlPoint2: CGPoint(x: 67, y: 2.69))
            rectangle3.addLine(to: CGPoint(x: 67, y: 17))
            rectangle3.addCurve(to: CGPoint(x: 61, y: 23), controlPoint1: CGPoint(x: 67, y: 20.31), controlPoint2: CGPoint(x: 64.31, y: 23))
            rectangle3.addLine(to: CGPoint(x: 6, y: 23))
            rectangle3.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 2.69, y: 23), controlPoint2: CGPoint(x: 0, y: 20.31))
            rectangle3.addLine(to: CGPoint(x: 0, y: 6))
            rectangle3.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
            rectangle3.close()
            context.saveGState()
            rectangle3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// icons8_triangle_arrow_50px
            // Warning: Image layers are not supported.
            
            /// +8
            let _8 = NSMutableAttributedString(string: "+8")
            _8.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _8.length))
            context.saveGState()
            _8.draw(at: CGPoint(x: 31, y: 4))
            context.restoreGState()
            
            /// icons8_delete_24px_1
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// TopBar Copy
        do {
            context.saveGState()
            context.translateBy(x: 91, y: 15)
            
            /// Rectangle 2
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint(x: 6, y: 0))
            rectangle4.addLine(to: CGPoint(x: 61, y: 0))
            rectangle4.addCurve(to: CGPoint(x: 67, y: 6), controlPoint1: CGPoint(x: 64.31, y: 0), controlPoint2: CGPoint(x: 67, y: 2.69))
            rectangle4.addLine(to: CGPoint(x: 67, y: 17))
            rectangle4.addCurve(to: CGPoint(x: 61, y: 23), controlPoint1: CGPoint(x: 67, y: 20.31), controlPoint2: CGPoint(x: 64.31, y: 23))
            rectangle4.addLine(to: CGPoint(x: 6, y: 23))
            rectangle4.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 2.69, y: 23), controlPoint2: CGPoint(x: 0, y: 20.31))
            rectangle4.addLine(to: CGPoint(x: 0, y: 6))
            rectangle4.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
            rectangle4.close()
            context.saveGState()
            rectangle4.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle4.fill()
            context.restoreGState()
            
            /// icons8_thermometer_50px
            // Warning: Image layers are not supported.
            
            /// -12
            let _12 = NSMutableAttributedString(string: "-12")
            _12.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _12.length))
            context.saveGState()
            _12.draw(at: CGPoint(x: 29, y: 4))
            context.restoreGState()
            
            /// icons8_delete_24px_1
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// TopBar
        do {
            context.saveGState()
            context.translateBy(x: 14, y: 15)
            
            /// Rectangle 2
            let rectangle5 = UIBezierPath()
            rectangle5.move(to: CGPoint(x: 6, y: 0))
            rectangle5.addLine(to: CGPoint(x: 61, y: 0))
            rectangle5.addCurve(to: CGPoint(x: 67, y: 6), controlPoint1: CGPoint(x: 64.31, y: 0), controlPoint2: CGPoint(x: 67, y: 2.69))
            rectangle5.addLine(to: CGPoint(x: 67, y: 17))
            rectangle5.addCurve(to: CGPoint(x: 61, y: 23), controlPoint1: CGPoint(x: 67, y: 20.31), controlPoint2: CGPoint(x: 64.31, y: 23))
            rectangle5.addLine(to: CGPoint(x: 6, y: 23))
            rectangle5.addCurve(to: CGPoint(x: 0, y: 17), controlPoint1: CGPoint(x: 2.69, y: 23), controlPoint2: CGPoint(x: 0, y: 20.31))
            rectangle5.addLine(to: CGPoint(x: 0, y: 6))
            rectangle5.addCurve(to: CGPoint(x: 6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.69), controlPoint2: CGPoint(x: 2.69, y: 0))
            rectangle5.close()
            context.saveGState()
            rectangle5.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle5.fill()
            context.restoreGState()
            
            /// icons8_last_quarter_50px Copy
            // Warning: Image layers are not supported.
            
            /// +5
            let _5 = NSMutableAttributedString(string: "+5")
            _5.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _5.length))
            context.saveGState()
            _5.draw(at: CGPoint(x: 31, y: 4))
            context.restoreGState()
            
            /// icons8_delete_24px_1
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawDetail(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1284), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1284), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1284)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 1284)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 375, y: 0))
        rectangle.addLine(to: CGPoint(x: 375, y: 1284))
        rectangle.addLine(to: CGPoint(x: 0, y: 1284))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 0, y: -0)
        rectangle.usesEvenOddFillRule = true
        UIColor.black.setFill()
        rectangle.fill()
        context.restoreGState()
        
        /// Giorgio Morandi
        let giorgioMorandi = NSMutableAttributedString(string: "Giorgio Morandi")
        giorgioMorandi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: giorgioMorandi.length))
        giorgioMorandi.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: giorgioMorandi.length))
        giorgioMorandi.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: giorgioMorandi.length))
        context.saveGState()
        giorgioMorandi.draw(at: CGPoint(x: 20, y: 414))
        context.restoreGState()
        
        /// Controls/Buttons/Dark/Shape (Custom)
        context.saveGState()
        context.setShadow(
            offset: CGSize(width: 5 * resizedShadowScale, height: 4 * resizedShadowScale),
            blur: 7 * resizedShadowScale,
            color: UIColor(white: 0, alpha: 0.5).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            context.translateBy(x: 102, y: 1086)
            
            /// Button Shape
            let buttonShape = UIBezierPath()
            buttonShape.move(to: CGPoint(x: 8, y: 0))
            buttonShape.addLine(to: CGPoint(x: 164, y: 0))
            buttonShape.addCurve(to: CGPoint(x: 172, y: 8), controlPoint1: CGPoint(x: 168.42, y: 0), controlPoint2: CGPoint(x: 172, y: 3.58))
            buttonShape.addLine(to: CGPoint(x: 172, y: 36))
            buttonShape.addCurve(to: CGPoint(x: 164, y: 44), controlPoint1: CGPoint(x: 172, y: 40.42), controlPoint2: CGPoint(x: 168.42, y: 44))
            buttonShape.addLine(to: CGPoint(x: 8, y: 44))
            buttonShape.addCurve(to: CGPoint(x: 0, y: 36), controlPoint1: CGPoint(x: 3.58, y: 44), controlPoint2: CGPoint(x: 0, y: 40.42))
            buttonShape.addLine(to: CGPoint(x: 0, y: 8))
            buttonShape.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            buttonShape.close()
            context.saveGState()
            buttonShape.usesEvenOddFillRule = true
            UIColor(white: 0.22, alpha: 1).setFill()
            buttonShape.fill()
            context.restoreGState()
            
            /// Label
            let label = NSMutableAttributedString(string: "NEXT")
            label.addAttribute(.font, value: UIFont(name: "Helvetica", size: 13)!, range: NSRange(location: 0, length: label.length))
            label.addAttribute(.kern, value: 5.09, range: NSRange(location: 0, length: label.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 20
                paragraphStyle.minimumLineHeight = 20
                label.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: label.length))
            }
            label.addAttribute(.foregroundColor, value: UIColor(white: 1, alpha: 0.5), range: NSRange(location: 0, length: label.length))
            context.saveGState()
            label.draw(in: CGRect(x: 8, y: 11, width: 156, height: 22))
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        
        /// Giorgio Morandi (1890-1964) wa
        let giorgioMorandi18901964Wa = NSMutableAttributedString(string: "Giorgio Morandi (1890-1964) was an Italian painter and printmaker who specialized in still life. His paintings are noted for their tonal subtlety in depicting apparently simple subjects, which were limited mainly to vases, bottles, bowls, flowers and landscapes.")
        giorgioMorandi18901964Wa.addAttribute(.font, value: UIFont(name: "Helvetica-LightOblique", size: 11)!, range: NSRange(location: 0, length: giorgioMorandi18901964Wa.length))
        giorgioMorandi18901964Wa.addAttribute(.kern, value: 0.14, range: NSRange(location: 0, length: giorgioMorandi18901964Wa.length))
        giorgioMorandi18901964Wa.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: giorgioMorandi18901964Wa.length))
        context.saveGState()
        giorgioMorandi18901964Wa.draw(in: CGRect(x: 20, y: 444, width: 336, height: 84))
        context.restoreGState()
        
        /// Tags:
        let tags = NSMutableAttributedString(string: "Tags: ")
        tags.addAttribute(.font, value: UIFont(name: "Helvetica-LightOblique", size: 11)!, range: NSRange(location: 0, length: tags.length))
        tags.addAttribute(.kern, value: 0.14, range: NSRange(location: 0, length: tags.length))
        tags.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: tags.length))
        context.saveGState()
        tags.draw(at: CGPoint(x: 20, y: 528))
        context.restoreGState()
        
        /// Suggested Scenerio:
        let suggestedScenerio = NSMutableAttributedString(string: "Suggested Scenerio: ")
        suggestedScenerio.addAttribute(.font, value: UIFont(name: "Helvetica-LightOblique", size: 11)!, range: NSRange(location: 0, length: suggestedScenerio.length))
        suggestedScenerio.addAttribute(.kern, value: 0.14, range: NSRange(location: 0, length: suggestedScenerio.length))
        suggestedScenerio.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: suggestedScenerio.length))
        context.saveGState()
        suggestedScenerio.draw(at: CGPoint(x: 20, y: 670))
        context.restoreGState()
        
        /// still-life
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 110)
            
            /// Mask
            let mask = UIBezierPath()
            mask.move(to: CGPoint.zero)
            mask.addLine(to: CGPoint(x: 375, y: 0))
            mask.addLine(to: CGPoint(x: 375, y: 272))
            mask.addLine(to: CGPoint(x: 0, y: 272))
            mask.addLine(to: CGPoint.zero)
            mask.close()
            context.saveGState()
            mask.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            mask.fill()
            context.restoreGState()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask.addClip()
            
            /// 68088878ad9413bb3722953604a222f8
            // Warning: Image layers are not supported.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Nature
        // Warning: New symbols are not supported.
        
        /// Portrait
        // Warning: New symbols are not supported.
        
        /// Group 3
        do {
            context.saveGState()
            context.translateBy(x: 28, y: 715)
            
            /// Mask
            let mask3 = UIBezierPath()
            mask3.move(to: CGPoint.zero)
            mask3.addLine(to: CGPoint(x: 160, y: 0))
            mask3.addLine(to: CGPoint(x: 160, y: 320))
            mask3.addLine(to: CGPoint(x: 0, y: 320))
            mask3.addLine(to: CGPoint.zero)
            mask3.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask3.addClip()
            
            /// f6e46b1409a9d4cddd4d3c2c8ad3058e
            // Warning: Image layers are not supported.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 188, y: 715)
            
            /// Mask
            let mask4 = UIBezierPath()
            mask4.move(to: CGPoint.zero)
            mask4.addLine(to: CGPoint(x: 160, y: 0))
            mask4.addLine(to: CGPoint(x: 160, y: 320))
            mask4.addLine(to: CGPoint(x: 0, y: 320))
            mask4.addLine(to: CGPoint.zero)
            mask4.close()
            
            /// Mask (Outline Mask)
            context.saveGState()
            mask4.addClip()
            
            /// RCY-R_Hex_GemTable_Lifestyle_SlashObjects_web
            // Warning: Image layers are not supported.
            
            context.restoreGState()
            // End Mask (Outline Mask)
            
            context.restoreGState()
        }
        
        /// Header 2 Copy
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -29)
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint.zero)
            rectangle3.addLine(to: CGPoint(x: 391, y: 0))
            rectangle3.addLine(to: CGPoint(x: 391, y: 139))
            rectangle3.addLine(to: CGPoint(x: 0, y: 139))
            rectangle3.addLine(to: CGPoint.zero)
            rectangle3.close()
            context.saveGState()
            rectangle3.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle3.fill()
            rectangle3.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// icons8_back_24px
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawFiltered(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1036), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1036), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1036)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 375, resizedFrame.height / 1036)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 414, y: 0))
        background.addLine(to: CGPoint(x: 414, y: 1099))
        background.addLine(to: CGPoint(x: 0, y: 1099))
        background.addLine(to: CGPoint.zero)
        background.close()
        context.saveGState()
        context.translateBy(x: -31, y: -34)
        background.usesEvenOddFillRule = true
        UIColor(white: 0.212, alpha: 1).setFill()
        background.fill()
        context.restoreGState()
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: -6, y: 102)
            
            /// Van Gogh
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 20, y: 152.91)
                
                /// Oval Copy 4
                let ovalCopy4 = UIBezierPath()
                ovalCopy4.move(to: CGPoint(x: 38, y: 76.45))
                ovalCopy4.addCurve(to: CGPoint(x: 76, y: 38.23), controlPoint1: CGPoint(x: 58.99, y: 76.45), controlPoint2: CGPoint(x: 76, y: 59.34))
                ovalCopy4.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.11), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy4.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy4.addCurve(to: CGPoint(x: 38, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 17.01, y: 76.45))
                ovalCopy4.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy4.fill()
                context.saveGState()
                ovalCopy4.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy4.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy4.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy4.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy4.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Van Gogh Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 20, y: 775.76)
                
                /// Oval Copy 4
                let ovalCopy5 = UIBezierPath()
                ovalCopy5.move(to: CGPoint(x: 38, y: 76.45))
                ovalCopy5.addCurve(to: CGPoint(x: 76, y: 38.23), controlPoint1: CGPoint(x: 58.99, y: 76.45), controlPoint2: CGPoint(x: 76, y: 59.34))
                ovalCopy5.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.11), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy5.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy5.addCurve(to: CGPoint(x: 38, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 17.01, y: 76.45))
                ovalCopy5.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy5.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy5.fill()
                context.saveGState()
                ovalCopy5.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy5.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy5.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy5.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy5.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Wave
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 152.91)
                
                /// Oval Copy 4
                let ovalCopy6 = UIBezierPath()
                ovalCopy6.move(to: CGPoint(x: 38, y: 76.45))
                ovalCopy6.addCurve(to: CGPoint(x: 76, y: 38.23), controlPoint1: CGPoint(x: 58.99, y: 76.45), controlPoint2: CGPoint(x: 76, y: 59.34))
                ovalCopy6.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.11), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy6.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy6.addCurve(to: CGPoint(x: 38, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 17.01, y: 76.45))
                ovalCopy6.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy6.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy6.fill()
                context.saveGState()
                ovalCopy6.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy6.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy6.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy6.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy6.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Wave Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 293, y: 683)
                
                /// Oval Copy 4
                let ovalCopy7 = UIBezierPath()
                ovalCopy7.move(to: CGPoint(x: 38, y: 76.45))
                ovalCopy7.addCurve(to: CGPoint(x: 76, y: 38.23), controlPoint1: CGPoint(x: 58.99, y: 76.45), controlPoint2: CGPoint(x: 76, y: 59.34))
                ovalCopy7.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.11), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy7.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy7.addCurve(to: CGPoint(x: 38, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 17.01, y: 76.45))
                ovalCopy7.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy7.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy7.fill()
                context.saveGState()
                ovalCopy7.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy7.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy7.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy7.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy7.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Wave Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 111, y: 495.43)
                
                /// Oval Copy 4
                let ovalCopy8 = UIBezierPath()
                ovalCopy8.move(to: CGPoint(x: 38, y: 76.45))
                ovalCopy8.addCurve(to: CGPoint(x: 76, y: 38.23), controlPoint1: CGPoint(x: 58.99, y: 76.45), controlPoint2: CGPoint(x: 76, y: 59.34))
                ovalCopy8.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.11), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy8.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy8.addCurve(to: CGPoint(x: 38, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 17.01, y: 76.45))
                ovalCopy8.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy8.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy8.fill()
                context.saveGState()
                ovalCopy8.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy8.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy8.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy8.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy8.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 202, y: 402.66)
                
                /// Oval Copy 4
                let ovalCopy9 = UIBezierPath()
                ovalCopy9.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy9.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy9.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy9.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy9.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy9.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy9.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy9.fill()
                context.saveGState()
                ovalCopy9.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy9.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy9.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy9.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy9.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Afraid
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 295, y: 152.91)
                
                /// Oval Copy 4
                let ovalCopy10 = UIBezierPath()
                ovalCopy10.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy10.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy10.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy10.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy10.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy10.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy10.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy10.fill()
                context.saveGState()
                ovalCopy10.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy10.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy10.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy10.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy10.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Afraid Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 775.76)
                
                /// Oval Copy 4
                let ovalCopy11 = UIBezierPath()
                ovalCopy11.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy11.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy11.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy11.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy11.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy11.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy11.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy11.fill()
                context.saveGState()
                ovalCopy11.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy11.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy11.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy11.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy11.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Afraid Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 21, y: 495.43)
                
                /// Oval Copy 4
                let ovalCopy12 = UIBezierPath()
                ovalCopy12.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy12.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy12.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy12.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy12.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy12.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy12.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy12.fill()
                context.saveGState()
                ovalCopy12.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy12.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy12.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy12.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy12.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 245.67)
                
                /// Oval Copy 4
                let ovalCopy13 = UIBezierPath()
                ovalCopy13.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy13.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy13.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy13.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy13.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy13.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy13.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy13.fill()
                context.saveGState()
                ovalCopy13.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy13.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy13.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy13.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy13.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 6
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 202, y: 775.76)
                
                /// Oval Copy 4
                let ovalCopy14 = UIBezierPath()
                ovalCopy14.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy14.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy14.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy14.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy14.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy14.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy14.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy14.fill()
                context.saveGState()
                ovalCopy14.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy14.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy14.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy14.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy14.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 3
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 204, y: 152.91)
                
                /// Oval Copy 4
                let ovalCopy15 = UIBezierPath()
                ovalCopy15.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy15.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy15.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy15.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy15.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy15.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy15.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy15.fill()
                context.saveGState()
                ovalCopy15.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy15.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy15.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy15.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy15.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 7
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 202, y: 683)
                
                /// Oval Copy 4
                let ovalCopy16 = UIBezierPath()
                ovalCopy16.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy16.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy16.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy16.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy16.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy16.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy16.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy16.fill()
                context.saveGState()
                ovalCopy16.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy16.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy16.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy16.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy16.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 4
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 294, y: 775.76)
                
                /// Oval Copy 4
                let ovalCopy17 = UIBezierPath()
                ovalCopy17.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy17.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy17.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy17.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy17.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy17.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy17.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy17.fill()
                context.saveGState()
                ovalCopy17.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy17.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy17.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy17.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy17.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 8
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 202, y: 495.43)
                
                /// Oval Copy 4
                let ovalCopy18 = UIBezierPath()
                ovalCopy18.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy18.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy18.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy18.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy18.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy18.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy18.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy18.fill()
                context.saveGState()
                ovalCopy18.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy18.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy18.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy18.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy18.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 5
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 21, y: 245.67)
                
                /// Oval Copy 4
                let ovalCopy19 = UIBezierPath()
                ovalCopy19.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy19.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy19.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy19.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy19.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy19.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy19.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy19.fill()
                context.saveGState()
                ovalCopy19.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy19.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy19.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy19.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy19.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Mona Copy 9
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 21, y: 868.53)
                
                /// Oval Copy 4
                let ovalCopy20 = UIBezierPath()
                ovalCopy20.move(to: CGPoint(x: 37.5, y: 76.45))
                ovalCopy20.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                ovalCopy20.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                ovalCopy20.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy20.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                ovalCopy20.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy20.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy20.fill()
                context.saveGState()
                ovalCopy20.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy20.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy20.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy20.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy20.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Morandi
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 295, y: 60.14)
                
                /// Oval Copy 3
                let ovalCopy3 = UIBezierPath()
                ovalCopy3.move(to: CGPoint(x: 37, y: 76.45))
                ovalCopy3.addCurve(to: CGPoint(x: 74, y: 38.23), controlPoint1: CGPoint(x: 57.43, y: 76.45), controlPoint2: CGPoint(x: 74, y: 59.34))
                ovalCopy3.addCurve(to: CGPoint(x: 37, y: 0), controlPoint1: CGPoint(x: 74, y: 17.11), controlPoint2: CGPoint(x: 57.43, y: 0))
                ovalCopy3.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.57, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy3.addCurve(to: CGPoint(x: 37, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.57, y: 76.45))
                ovalCopy3.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy3.fill()
                context.saveGState()
                ovalCopy3.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy3.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy3.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 3 (Outline Mask)
                context.saveGState()
                ovalCopy3.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy3.addClip()
                
                /// morandi
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 3 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Morandi Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 681.98)
                
                /// Oval Copy 3
                let ovalCopy21 = UIBezierPath()
                ovalCopy21.move(to: CGPoint(x: 37, y: 76.45))
                ovalCopy21.addCurve(to: CGPoint(x: 74, y: 38.23), controlPoint1: CGPoint(x: 57.43, y: 76.45), controlPoint2: CGPoint(x: 74, y: 59.34))
                ovalCopy21.addCurve(to: CGPoint(x: 37, y: 0), controlPoint1: CGPoint(x: 74, y: 17.11), controlPoint2: CGPoint(x: 57.43, y: 0))
                ovalCopy21.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.57, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy21.addCurve(to: CGPoint(x: 37, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.57, y: 76.45))
                ovalCopy21.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy21.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy21.fill()
                context.saveGState()
                ovalCopy21.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy21.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy21.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 3 (Outline Mask)
                context.saveGState()
                ovalCopy21.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy21.addClip()
                
                /// morandi
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 3 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Morandi Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 294, y: 402.66)
                
                /// Oval Copy 3
                let ovalCopy22 = UIBezierPath()
                ovalCopy22.move(to: CGPoint(x: 37, y: 76.45))
                ovalCopy22.addCurve(to: CGPoint(x: 74, y: 38.23), controlPoint1: CGPoint(x: 57.43, y: 76.45), controlPoint2: CGPoint(x: 74, y: 59.34))
                ovalCopy22.addCurve(to: CGPoint(x: 37, y: 0), controlPoint1: CGPoint(x: 74, y: 17.11), controlPoint2: CGPoint(x: 57.43, y: 0))
                ovalCopy22.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.57, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                ovalCopy22.addCurve(to: CGPoint(x: 37, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.57, y: 76.45))
                ovalCopy22.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                ovalCopy22.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy22.fill()
                context.saveGState()
                ovalCopy22.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy22.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy22.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 3 (Outline Mask)
                context.saveGState()
                ovalCopy22.apply(CGAffineTransform(translationX: 0, y: -0))
                ovalCopy22.addClip()
                
                /// morandi
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 3 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Monet Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 203, y: 58.11)
                
                /// Oval Copy 2
                let ovalCopy2 = UIBezierPath()
                ovalCopy2.move(to: CGPoint(x: 38, y: 78.49))
                ovalCopy2.addCurve(to: CGPoint(x: 76, y: 39.25), controlPoint1: CGPoint(x: 58.99, y: 78.49), controlPoint2: CGPoint(x: 76, y: 60.92))
                ovalCopy2.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.57), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy2.addCurve(to: CGPoint(x: 0, y: 39.25), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.57))
                ovalCopy2.addCurve(to: CGPoint(x: 38, y: 78.49), controlPoint1: CGPoint(x: 0, y: 60.92), controlPoint2: CGPoint(x: 17.01, y: 78.49))
                ovalCopy2.close()
                context.saveGState()
                ovalCopy2.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy2.fill()
                context.saveGState()
                ovalCopy2.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy2.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 2 (Outline Mask)
                context.saveGState()
                ovalCopy2.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 2 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Monet Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 19, y: 680.96)
                
                /// Oval Copy 2
                let ovalCopy23 = UIBezierPath()
                ovalCopy23.move(to: CGPoint(x: 38, y: 78.49))
                ovalCopy23.addCurve(to: CGPoint(x: 76, y: 39.25), controlPoint1: CGPoint(x: 58.99, y: 78.49), controlPoint2: CGPoint(x: 76, y: 60.92))
                ovalCopy23.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.57), controlPoint2: CGPoint(x: 58.99, y: 0))
                ovalCopy23.addCurve(to: CGPoint(x: 0, y: 39.25), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.57))
                ovalCopy23.addCurve(to: CGPoint(x: 38, y: 78.49), controlPoint1: CGPoint(x: 0, y: 60.92), controlPoint2: CGPoint(x: 17.01, y: 78.49))
                ovalCopy23.close()
                context.saveGState()
                ovalCopy23.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy23.fill()
                context.saveGState()
                ovalCopy23.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy23.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy23.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 2 (Outline Mask)
                context.saveGState()
                ovalCopy23.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 2 (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Dali Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 112, y: 60.14)
                
                /// Mask
                let mask = UIBezierPath()
                mask.move(to: CGPoint(x: 37.5, y: 76.45))
                mask.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                mask.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                mask.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                mask.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                mask.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                mask.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.apply(CGAffineTransform(translationX: 0, y: -0))
                mask.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Dali Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 111, y: 402.66)
                
                /// Mask
                let mask3 = UIBezierPath()
                mask3.move(to: CGPoint(x: 37.5, y: 76.45))
                mask3.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                mask3.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                mask3.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                mask3.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                mask3.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                mask3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask3.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask3.apply(CGAffineTransform(translationX: 0, y: -0))
                mask3.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Picasso Copy
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 21, y: 60.14)
                
                /// Mask
                let mask4 = UIBezierPath()
                mask4.move(to: CGPoint(x: 37.5, y: 76.45))
                mask4.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                mask4.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                mask4.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                mask4.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                mask4.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                mask4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask4.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask4.apply(CGAffineTransform(translationX: 0, y: -0))
                mask4.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Picasso Copy 2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 2 * resizedShadowScale),
                blur: 4 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.5).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 20, y: 402.66)
                
                /// Mask
                let mask5 = UIBezierPath()
                mask5.move(to: CGPoint(x: 37.5, y: 76.45))
                mask5.addCurve(to: CGPoint(x: 75, y: 38.23), controlPoint1: CGPoint(x: 58.21, y: 76.45), controlPoint2: CGPoint(x: 75, y: 59.34))
                mask5.addCurve(to: CGPoint(x: 37.5, y: 0), controlPoint1: CGPoint(x: 75, y: 17.11), controlPoint2: CGPoint(x: 58.21, y: 0))
                mask5.addCurve(to: CGPoint(x: 0, y: 38.23), controlPoint1: CGPoint(x: 16.79, y: 0), controlPoint2: CGPoint(x: 0, y: 17.11))
                mask5.addCurve(to: CGPoint(x: 37.5, y: 76.45), controlPoint1: CGPoint(x: 0, y: 59.34), controlPoint2: CGPoint(x: 16.79, y: 76.45))
                mask5.close()
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                mask5.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask5.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask5.apply(CGAffineTransform(translationX: 0, y: -0))
                mask5.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Landscape Copy
            // Warning: New symbols are not supported.
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint.zero)
            rectangle.addLine(to: CGPoint(x: 389, y: 0))
            rectangle.addLine(to: CGPoint(x: 389, y: 348.63))
            rectangle.addLine(to: CGPoint(x: 0, y: 348.63))
            rectangle.addLine(to: CGPoint.zero)
            rectangle.close()
            context.saveGState()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath()
            rectangleCopy.move(to: CGPoint.zero)
            rectangleCopy.addLine(to: CGPoint(x: 389, y: 0))
            rectangleCopy.addLine(to: CGPoint(x: 389, y: 257.91))
            rectangleCopy.addLine(to: CGPoint(x: 0, y: 257.91))
            rectangleCopy.addLine(to: CGPoint.zero)
            rectangleCopy.close()
            context.saveGState()
            context.translateBy(x: 0, y: 347.61)
            context.saveGState()
            rectangleCopy.lineWidth = 2
            context.beginPath()
            context.addPath(rectangleCopy.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangleCopy.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Add
            do {
                context.saveGState()
                context.translateBy(x: 203, y: 245.67)
                
                /// Mask
                let mask6 = UIBezierPath()
                mask6.move(to: CGPoint(x: 38, y: 77.47))
                mask6.addCurve(to: CGPoint(x: 76, y: 38.74), controlPoint1: CGPoint(x: 58.99, y: 77.47), controlPoint2: CGPoint(x: 76, y: 60.13))
                mask6.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.34), controlPoint2: CGPoint(x: 58.99, y: 0))
                mask6.addCurve(to: CGPoint(x: 0, y: 38.74), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.34))
                mask6.addCurve(to: CGPoint(x: 38, y: 77.47), controlPoint1: CGPoint(x: 0, y: 60.13), controlPoint2: CGPoint(x: 17.01, y: 77.47))
                mask6.close()
                context.saveGState()
                mask6.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask6.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask6.addClip()
                
                /// Plus
                // Warning: New symbols are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add Copy
            do {
                context.saveGState()
                context.translateBy(x: 293, y: 494.41)
                
                /// Mask
                let mask7 = UIBezierPath()
                mask7.move(to: CGPoint(x: 38, y: 77.47))
                mask7.addCurve(to: CGPoint(x: 76, y: 38.74), controlPoint1: CGPoint(x: 58.99, y: 77.47), controlPoint2: CGPoint(x: 76, y: 60.13))
                mask7.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.34), controlPoint2: CGPoint(x: 58.99, y: 0))
                mask7.addCurve(to: CGPoint(x: 0, y: 38.74), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.34))
                mask7.addCurve(to: CGPoint(x: 38, y: 77.47), controlPoint1: CGPoint(x: 0, y: 60.13), controlPoint2: CGPoint(x: 17.01, y: 77.47))
                mask7.close()
                context.saveGState()
                mask7.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask7.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask7.addClip()
                
                /// Plus
                // Warning: New symbols are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add Copy 2
            do {
                context.saveGState()
                context.translateBy(x: 110, y: 868.53)
                
                /// Mask
                let mask8 = UIBezierPath()
                mask8.move(to: CGPoint(x: 38, y: 77.47))
                mask8.addCurve(to: CGPoint(x: 76, y: 38.74), controlPoint1: CGPoint(x: 58.99, y: 77.47), controlPoint2: CGPoint(x: 76, y: 60.13))
                mask8.addCurve(to: CGPoint(x: 38, y: 0), controlPoint1: CGPoint(x: 76, y: 17.34), controlPoint2: CGPoint(x: 58.99, y: 0))
                mask8.addCurve(to: CGPoint(x: 0, y: 38.74), controlPoint1: CGPoint(x: 17.01, y: 0), controlPoint2: CGPoint(x: 0, y: 17.34))
                mask8.addCurve(to: CGPoint(x: 38, y: 77.47), controlPoint1: CGPoint(x: 0, y: 60.13), controlPoint2: CGPoint(x: 17.01, y: 77.47))
                mask8.close()
                context.saveGState()
                mask8.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(mask8.cgPath)
                context.addRect(mask8.bounds.insetBy(dx: -4, dy: -6))
                context.clip(using: .evenOdd)
                context.translateBy(x: -81, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 81, y: 2)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.392, alpha: 0.5).cgColor)
                }
                UIColor.black.setFill()
                mask8.fill()
                context.restoreGState()
                mask8.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask8.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask8.addClip()
                
                /// Plus
                // Warning: New symbols are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Portrait Copy
            // Warning: New symbols are not supported.
            
            /// still-life copy
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// Header 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -23)
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint.zero)
            rectangle3.addLine(to: CGPoint(x: 391, y: 0))
            rectangle3.addLine(to: CGPoint(x: 391, y: 139))
            rectangle3.addLine(to: CGPoint(x: 0, y: 139))
            rectangle3.addLine(to: CGPoint.zero)
            rectangle3.close()
            context.saveGState()
            rectangle3.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle3.fill()
            rectangle3.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// BottomBar 2
        do {
            context.saveGState()
            context.translateBy(x: -20, y: 946)
            
            /// Rectangle
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint.zero)
            rectangle4.addLine(to: CGPoint(x: 399, y: 0))
            rectangle4.addLine(to: CGPoint(x: 399, y: 118))
            rectangle4.addLine(to: CGPoint(x: 0, y: 118))
            rectangle4.addLine(to: CGPoint.zero)
            rectangle4.close()
            context.saveGState()
            rectangle4.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle4.fill()
            rectangle4.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle4.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 45, y: 7)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy9 = UIBezierPath()
                rectangleCopy9.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy9.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy9.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy9.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy9.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy9.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy9.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy9.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy9.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy9.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangleCopy9.fill()
                rectangleCopy9.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangleCopy9.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle5 = UIBezierPath()
                rectangle5.move(to: CGPoint(x: 2, y: 0))
                rectangle5.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle5.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle5.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle5.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle5.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle5.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle5.addLine(to: CGPoint(x: 0, y: 2))
                rectangle5.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle5.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle5.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle5.fill()
                rectangle5.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangle5.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFilters(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1000), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1000), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1000)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background 2
        let background2 = UIBezierPath()
        background2.move(to: CGPoint.zero)
        background2.addLine(to: CGPoint(x: 490, y: 0))
        background2.addLine(to: CGPoint(x: 490, y: 1325))
        background2.addLine(to: CGPoint(x: 0, y: 1325))
        background2.addLine(to: CGPoint.zero)
        background2.close()
        context.saveGState()
        context.translateBy(x: -62, y: 3)
        background2.usesEvenOddFillRule = true
        UIColor.black.setFill()
        background2.fill()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 11, y: 167)
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath()
            rectangleCopy4.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy4.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy4.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy4.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy4.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy4.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy4.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy4.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy4.close()
            context.saveGState()
            context.translateBy(x: 0, y: 671)
            rectangleCopy4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy4.cgPath)
            context.addRect(rectangleCopy4.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy4.fill()
                context.saveGState()
                rectangleCopy4.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy4.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy4.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 19, y: 0))
            rectangle.addLine(to: CGPoint(x: 333, y: 0))
            rectangle.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangle.addLine(to: CGPoint(x: 352, y: 93))
            rectangle.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangle.addLine(to: CGPoint(x: 19, y: 112))
            rectangle.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangle.addLine(to: CGPoint(x: 0, y: 19))
            rectangle.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangle.close()
            context.saveGState()
            rectangle.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle.fill()
                context.saveGState()
                rectangle.lineWidth = 2
                UIColor.black.setStroke()
                rectangle.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangle.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint(x: 19, y: 0))
            rectangle3.addLine(to: CGPoint(x: 333, y: 0))
            rectangle3.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangle3.addLine(to: CGPoint(x: 352, y: 93))
            rectangle3.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangle3.addLine(to: CGPoint(x: 19, y: 112))
            rectangle3.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangle3.addLine(to: CGPoint(x: 0, y: 19))
            rectangle3.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangle3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 134)
            rectangle3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.addRect(rectangle3.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle3.fill()
                context.saveGState()
                rectangle3.lineWidth = 2
                UIColor.black.setStroke()
                rectangle3.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangle3.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath()
            rectangleCopy.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy.close()
            context.saveGState()
            context.translateBy(x: 0, y: 268)
            rectangleCopy.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy.cgPath)
            context.addRect(rectangleCopy.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy.fill()
                context.saveGState()
                rectangleCopy.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy.fill()
            context.restoreGState()
            
            /// Rectangle Copy 2
            let rectangleCopy2 = UIBezierPath()
            rectangleCopy2.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy2.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy2.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy2.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy2.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy2.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy2.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy2.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 402)
            rectangleCopy2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy2.cgPath)
            context.addRect(rectangleCopy2.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy2.fill()
                context.saveGState()
                rectangleCopy2.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy2.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy2.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy2.fill()
            context.restoreGState()
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath()
            rectangleCopy3.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy3.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy3.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy3.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy3.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy3.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy3.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy3.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy3.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 536)
            rectangleCopy3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy3.cgPath)
            context.addRect(rectangleCopy3.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy3.fill()
                context.saveGState()
                rectangleCopy3.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy3.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy3.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            /// Van Gogh
            do {
                context.saveGState()
                context.translateBy(x: 27.18, y: 691)
                
                /// Neo-Impressionism 18
                let neoImpressionism18 = NSMutableAttributedString(string: "Neo-Impressionism\n1853-1890 Dutch Painter")
                neoImpressionism18.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: neoImpressionism18.length))
                neoImpressionism18.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: neoImpressionism18.length))
                context.saveGState()
                neoImpressionism18.draw(in: CGRect(x: 99.82, y: 33, width: 174, height: 36))
                context.restoreGState()
                
                /// Vincent van Gogh
                let vincentVanGogh = NSMutableAttributedString(string: "Vincent van Gogh")
                vincentVanGogh.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: vincentVanGogh.length))
                context.saveGState()
                vincentVanGogh.draw(in: CGRect(x: 100.82, y: 10, width: 147, height: 27))
                context.restoreGState()
                
                /// Oval Copy 4
                let ovalCopy4 = UIBezierPath()
                ovalCopy4.move(to: CGPoint(x: 32.48, y: 65))
                ovalCopy4.addCurve(to: CGPoint(x: 64.96, y: 32.5), controlPoint1: CGPoint(x: 50.42, y: 65), controlPoint2: CGPoint(x: 64.96, y: 50.45))
                ovalCopy4.addCurve(to: CGPoint(x: 32.48, y: 0), controlPoint1: CGPoint(x: 64.96, y: 14.55), controlPoint2: CGPoint(x: 50.42, y: 0))
                ovalCopy4.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.54, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                ovalCopy4.addCurve(to: CGPoint(x: 32.48, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.54, y: 65))
                ovalCopy4.close()
                context.saveGState()
                ovalCopy4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy4.fill()
                context.saveGState()
                ovalCopy4.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy4.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy4.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy4.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Morandi
            do {
                context.saveGState()
                context.translateBy(x: 27.36, y: 556)
                
                /// Realism 1890-1964 It
                let realism18901964It = NSMutableAttributedString(string: "Realism\n1890-1964 Italian Painter")
                realism18901964It.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: realism18901964It.length))
                realism18901964It.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: realism18901964It.length))
                context.saveGState()
                realism18901964It.draw(in: CGRect(x: 99.64, y: 35, width: 157, height: 36))
                context.restoreGState()
                
                /// Giorgio Morandi
                let giorgioMorandi = NSMutableAttributedString(string: "Giorgio Morandi")
                giorgioMorandi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: giorgioMorandi.length))
                context.saveGState()
                giorgioMorandi.draw(in: CGRect(x: 99.64, y: 12, width: 148, height: 53))
                context.restoreGState()
                
                /// Oval Copy 3
                let ovalCopy3 = UIBezierPath()
                ovalCopy3.move(to: CGPoint(x: 32.33, y: 65))
                ovalCopy3.addCurve(to: CGPoint(x: 64.65, y: 32.5), controlPoint1: CGPoint(x: 50.18, y: 65), controlPoint2: CGPoint(x: 64.65, y: 50.45))
                ovalCopy3.addCurve(to: CGPoint(x: 32.33, y: 0), controlPoint1: CGPoint(x: 64.65, y: 14.55), controlPoint2: CGPoint(x: 50.18, y: 0))
                ovalCopy3.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.47, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                ovalCopy3.addCurve(to: CGPoint(x: 32.33, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.47, y: 65))
                ovalCopy3.close()
                context.saveGState()
                ovalCopy3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy3.fill()
                context.saveGState()
                ovalCopy3.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy3.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy3.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 3 (Outline Mask)
                context.saveGState()
                ovalCopy3.addClip()
                
                /// morandi
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 3 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Monet
            do {
                context.saveGState()
                context.translateBy(x: 27.67, y: 422.53)
                
                /// Impressionism 1840-1
                let impressionism18401 = NSMutableAttributedString(string: "Impressionism\n1840-1926  French Painter")
                impressionism18401.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: impressionism18401.length))
                impressionism18401.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: impressionism18401.length))
                context.saveGState()
                impressionism18401.draw(in: CGRect(x: 99.33, y: 31.47, width: 163, height: 36))
                context.restoreGState()
                
                /// Claude Monet
                let claudeMonet = NSMutableAttributedString(string: "Claude Monet")
                claudeMonet.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: claudeMonet.length))
                context.saveGState()
                claudeMonet.draw(in: CGRect(x: 99.33, y: 11.47, width: 116, height: 27))
                context.restoreGState()
                
                /// Oval Copy 2
                let ovalCopy2 = UIBezierPath()
                ovalCopy2.move(to: CGPoint(x: 32.33, y: 64.94))
                ovalCopy2.addCurve(to: CGPoint(x: 64.65, y: 32.47), controlPoint1: CGPoint(x: 50.18, y: 64.94), controlPoint2: CGPoint(x: 64.65, y: 50.4))
                ovalCopy2.addCurve(to: CGPoint(x: 32.33, y: 0), controlPoint1: CGPoint(x: 64.65, y: 14.54), controlPoint2: CGPoint(x: 50.18, y: 0))
                ovalCopy2.addCurve(to: CGPoint(x: 0, y: 32.47), controlPoint1: CGPoint(x: 14.47, y: 0), controlPoint2: CGPoint(x: 0, y: 14.54))
                ovalCopy2.addCurve(to: CGPoint(x: 32.33, y: 64.94), controlPoint1: CGPoint(x: 0, y: 50.4), controlPoint2: CGPoint(x: 14.47, y: 64.94))
                ovalCopy2.close()
                context.saveGState()
                ovalCopy2.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy2.fill()
                context.saveGState()
                ovalCopy2.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy2.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 2 (Outline Mask)
                context.saveGState()
                ovalCopy2.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Dali
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 288)
                
                /// Surrealism 1904-1989
                let surrealism19041989 = NSMutableAttributedString(string: "Surrealism\n1904-1989 Spanish Painter")
                surrealism19041989.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: surrealism19041989.length))
                surrealism19041989.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: surrealism19041989.length))
                context.saveGState()
                surrealism19041989.draw(in: CGRect(x: 101, y: 35, width: 156, height: 36))
                context.restoreGState()
                
                /// Salvador Dalí
                let salvadorDali = NSMutableAttributedString(string: "Salvador Dalí")
                salvadorDali.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: salvadorDali.length))
                context.saveGState()
                salvadorDali.draw(in: CGRect(x: 101, y: 13, width: 112, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask = UIBezierPath()
                mask.move(to: CGPoint(x: 32.5, y: 65))
                mask.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask.close()
                context.saveGState()
                mask.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Picasso
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 153)
                
                /// Cubism 1973-1881 Spa
                let cubism19731881Spa = NSMutableAttributedString(string: "Cubism\n1973-1881 Spanish Painter")
                cubism19731881Spa.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: cubism19731881Spa.length))
                cubism19731881Spa.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: cubism19731881Spa.length))
                context.saveGState()
                cubism19731881Spa.draw(in: CGRect(x: 101, y: 37, width: 156, height: 36))
                context.restoreGState()
                
                /// Pablo Picasso
                let pabloPicasso = NSMutableAttributedString(string: "Pablo Picasso")
                pabloPicasso.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: pabloPicasso.length))
                context.saveGState()
                pabloPicasso.draw(in: CGRect(x: 101, y: 15, width: 117, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask3 = UIBezierPath()
                mask3.move(to: CGPoint(x: 32.5, y: 65))
                mask3.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask3.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask3.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask3.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask3.close()
                context.saveGState()
                mask3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask3.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask3.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 19)
                
                /// Add Your Own Filter
                let addYourOwnFilter = NSMutableAttributedString(string: "Add Your Own Filter")
                addYourOwnFilter.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: addYourOwnFilter.length))
                addYourOwnFilter.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: addYourOwnFilter.length))
                context.saveGState()
                addYourOwnFilter.draw(in: CGRect(x: 88, y: 22, width: 189, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask4 = UIBezierPath()
                mask4.move(to: CGPoint(x: 32.5, y: 65))
                mask4.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask4.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask4.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask4.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask4.close()
                context.saveGState()
                mask4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask4.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask4.addClip()
                
                /// Plus
                // Warning: New symbols are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Header 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -20)
            
            /// Rectangle
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint.zero)
            rectangle4.addLine(to: CGPoint(x: 391, y: 0))
            rectangle4.addLine(to: CGPoint(x: 391, y: 139))
            rectangle4.addLine(to: CGPoint(x: 0, y: 139))
            rectangle4.addLine(to: CGPoint.zero)
            rectangle4.close()
            context.saveGState()
            rectangle4.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle4.fill()
            rectangle4.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle4.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// BottomBar 2
        do {
            context.saveGState()
            context.translateBy(x: -15, y: 920)
            
            /// Rectangle
            let rectangle5 = UIBezierPath()
            rectangle5.move(to: CGPoint.zero)
            rectangle5.addLine(to: CGPoint(x: 399, y: 0))
            rectangle5.addLine(to: CGPoint(x: 399, y: 118))
            rectangle5.addLine(to: CGPoint(x: 0, y: 118))
            rectangle5.addLine(to: CGPoint.zero)
            rectangle5.close()
            context.saveGState()
            rectangle5.usesEvenOddFillRule = true
            UIColor(white: 0, alpha: 0.84).setFill()
            rectangle5.fill()
            rectangle5.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle5.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 45, y: 7)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy9 = UIBezierPath()
                rectangleCopy9.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy9.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy9.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy9.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy9.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy9.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy9.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy9.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy9.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy9.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy9.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangleCopy9.fill()
                rectangleCopy9.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangleCopy9.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle6 = UIBezierPath()
                rectangle6.move(to: CGPoint(x: 2, y: 0))
                rectangle6.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle6.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle6.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle6.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle6.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle6.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle6.addLine(to: CGPoint(x: 0, y: 2))
                rectangle6.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle6.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle6.fill()
                rectangle6.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangle6.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 341, y: 84)
            
            /// Rectangle
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint(x: 5, y: 0))
            rectangle7.addLine(to: CGPoint(x: 19, y: 0))
            rectangle7.addCurve(to: CGPoint(x: 24, y: 5), controlPoint1: CGPoint(x: 21.76, y: 0), controlPoint2: CGPoint(x: 24, y: 2.24))
            rectangle7.addLine(to: CGPoint(x: 24, y: 19))
            rectangle7.addCurve(to: CGPoint(x: 19, y: 24), controlPoint1: CGPoint(x: 24, y: 21.76), controlPoint2: CGPoint(x: 21.76, y: 24))
            rectangle7.addLine(to: CGPoint(x: 5, y: 24))
            rectangle7.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 2.24, y: 24), controlPoint2: CGPoint(x: 0, y: 21.76))
            rectangle7.addLine(to: CGPoint(x: 0, y: 5))
            rectangle7.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            rectangle7.close()
            context.saveGState()
            rectangle7.lineWidth = 2
            UIColor.white.setStroke()
            rectangle7.stroke()
            context.restoreGState()
            
            /// New shape
            let newShape = UIBezierPath()
            newShape.move(to: CGPoint(x: 1.44, y: 0))
            newShape.addLine(to: CGPoint(x: 7.68, y: 3.84))
            newShape.addLine(to: CGPoint(x: 13.92, y: 0))
            newShape.addLine(to: CGPoint(x: 15.36, y: 2.4))
            newShape.addLine(to: CGPoint(x: 7.68, y: 7.2))
            newShape.addLine(to: CGPoint(x: 0, y: 2.4))
            newShape.addLine(to: CGPoint(x: 1.44, y: 0))
            newShape.close()
            context.saveGState()
            context.translateBy(x: 4.8, y: 9.12)
            newShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            newShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFiltersCopy2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1087), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1087), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1087)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background 2
        let background2 = UIBezierPath()
        background2.move(to: CGPoint.zero)
        background2.addLine(to: CGPoint(x: 490, y: 0))
        background2.addLine(to: CGPoint(x: 490, y: 1129))
        background2.addLine(to: CGPoint(x: 0, y: 1129))
        background2.addLine(to: CGPoint.zero)
        background2.close()
        context.saveGState()
        context.translateBy(x: -58, y: -6)
        background2.usesEvenOddFillRule = true
        UIColor(white: 0.075, alpha: 1).setFill()
        background2.fill()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 22, y: 143)
            
            /// Morandi
            do {
                context.saveGState()
                context.translateBy(x: 175, y: 340)
                
                /// Mask group
                do {
                    context.saveGState()
                    
                    /// Rectangle Copy 3
                    let rectangleCopy3 = UIBezierPath()
                    rectangleCopy3.move(to: CGPoint(x: 20, y: 0))
                    rectangleCopy3.addLine(to: CGPoint(x: 136, y: 0))
                    rectangleCopy3.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                    rectangleCopy3.addLine(to: CGPoint(x: 156, y: 202))
                    rectangleCopy3.addCurve(to: CGPoint(x: 136, y: 222), controlPoint1: CGPoint(x: 156, y: 213.05), controlPoint2: CGPoint(x: 147.05, y: 222))
                    rectangleCopy3.addLine(to: CGPoint(x: 20, y: 222))
                    rectangleCopy3.addCurve(to: CGPoint(x: 0, y: 202), controlPoint1: CGPoint(x: 8.95, y: 222), controlPoint2: CGPoint(x: 0, y: 213.05))
                    rectangleCopy3.addLine(to: CGPoint(x: 0, y: 20))
                    rectangleCopy3.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangleCopy3.close()
                    context.saveGState()
                    rectangleCopy3.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(rectangleCopy3.cgPath)
                    context.addRect(rectangleCopy3.bounds.insetBy(dx: -26, dy: -26))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -193, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangleCopy3.fill()
                        context.saveGState()
                        rectangleCopy3.lineWidth = 2
                        UIColor.black.setStroke()
                        rectangleCopy3.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    rectangleCopy3.usesEvenOddFillRule = true
                    UIColor(white: 0.925, alpha: 1).setFill()
                    rectangleCopy3.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy 3 (Outline Mask)
                    context.saveGState()
                    rectangleCopy3.addClip()
                    
                    /// morandi
                    // Warning: Image layers are not supported.
                    
                    /// Rectangle
                    let rectangle = UIBezierPath()
                    rectangle.move(to: CGPoint.zero)
                    rectangle.addLine(to: CGPoint(x: 156, y: 0))
                    rectangle.addLine(to: CGPoint(x: 156, y: 63))
                    rectangle.addLine(to: CGPoint(x: 0, y: 63))
                    rectangle.addLine(to: CGPoint.zero)
                    rectangle.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 190)
                    rectangle.usesEvenOddFillRule = true
                    UIColor(white: 0.212, alpha: 0.68).setFill()
                    rectangle.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy 3 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Giorgio Morandi
                let giorgioMorandi = NSMutableAttributedString(string: "Giorgio Morandi")
                giorgioMorandi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: giorgioMorandi.length))
                context.saveGState()
                giorgioMorandi.draw(in: CGRect(x: 6, y: 196, width: 148, height: 53))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Monet
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 622)
                
                /// Rectangle Copy 2
                let rectangleCopy2 = UIBezierPath()
                rectangleCopy2.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy2.addLine(to: CGPoint(x: 316, y: 0))
                rectangleCopy2.addCurve(to: CGPoint(x: 336, y: 20), controlPoint1: CGPoint(x: 327.05, y: 0), controlPoint2: CGPoint(x: 336, y: 8.95))
                rectangleCopy2.addLine(to: CGPoint(x: 336, y: 167))
                rectangleCopy2.addCurve(to: CGPoint(x: 316, y: 187), controlPoint1: CGPoint(x: 336, y: 178.05), controlPoint2: CGPoint(x: 327.05, y: 187))
                rectangleCopy2.addLine(to: CGPoint(x: 20, y: 187))
                rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 167), controlPoint1: CGPoint(x: 8.95, y: 187), controlPoint2: CGPoint(x: 0, y: 178.05))
                rectangleCopy2.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy2.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy2.close()
                context.saveGState()
                rectangleCopy2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy2.cgPath)
                context.addRect(rectangleCopy2.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -373, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 377, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy2.fill()
                    context.saveGState()
                    rectangleCopy2.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy2.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy2.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy2.fill()
                context.restoreGState()
                
                /// Rectangle Copy 2 (Outline Mask)
                context.saveGState()
                rectangleCopy2.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle3 = UIBezierPath()
                rectangle3.move(to: CGPoint.zero)
                rectangle3.addLine(to: CGPoint(x: 339, y: 0))
                rectangle3.addLine(to: CGPoint(x: 339, y: 49))
                rectangle3.addLine(to: CGPoint(x: 0, y: 49))
                rectangle3.addLine(to: CGPoint.zero)
                rectangle3.close()
                context.saveGState()
                context.translateBy(x: -2, y: 158)
                rectangle3.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle3.fill()
                context.restoreGState()
                
                /// Claude Monet
                let claudeMonet = NSMutableAttributedString(string: "Claude Monet")
                claudeMonet.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: claudeMonet.length))
                context.saveGState()
                claudeMonet.draw(in: CGRect(x: 9, y: 162, width: 116, height: 20))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Picasso
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 379)
                
                /// Rectangle Copy 3
                let rectangleCopy9 = UIBezierPath()
                rectangleCopy9.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy9.addLine(to: CGPoint(x: 136, y: 0))
                rectangleCopy9.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangleCopy9.addLine(to: CGPoint(x: 156, y: 202))
                rectangleCopy9.addCurve(to: CGPoint(x: 136, y: 222), controlPoint1: CGPoint(x: 156, y: 213.05), controlPoint2: CGPoint(x: 147.05, y: 222))
                rectangleCopy9.addLine(to: CGPoint(x: 20, y: 222))
                rectangleCopy9.addCurve(to: CGPoint(x: 0, y: 202), controlPoint1: CGPoint(x: 8.95, y: 222), controlPoint2: CGPoint(x: 0, y: 213.05))
                rectangleCopy9.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy9.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy9.close()
                context.saveGState()
                rectangleCopy9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy9.cgPath)
                context.addRect(rectangleCopy9.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy9.fill()
                    context.saveGState()
                    rectangleCopy9.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy9.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy9.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy9.fill()
                context.restoreGState()
                
                /// Rectangle Copy 3 (Outline Mask)
                context.saveGState()
                rectangleCopy9.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle4 = UIBezierPath()
                rectangle4.move(to: CGPoint.zero)
                rectangle4.addLine(to: CGPoint(x: 156, y: 0))
                rectangle4.addLine(to: CGPoint(x: 156, y: 63))
                rectangle4.addLine(to: CGPoint(x: 0, y: 63))
                rectangle4.addLine(to: CGPoint.zero)
                rectangle4.close()
                context.saveGState()
                context.translateBy(x: 0, y: 189)
                rectangle4.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle4.fill()
                context.restoreGState()
                
                /// Pablo Picasso
                let pabloPicasso = NSMutableAttributedString(string: "Pablo Picasso")
                pabloPicasso.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: pabloPicasso.length))
                context.saveGState()
                pabloPicasso.draw(in: CGRect(x: 6, y: 195, width: 117, height: 20))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy 3 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Van Gogh
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 174)
                
                /// Mask group
                do {
                    context.saveGState()
                    
                    /// Rectangle Copy 4
                    let rectangleCopy4 = UIBezierPath()
                    rectangleCopy4.move(to: CGPoint(x: 20, y: 0))
                    rectangleCopy4.addLine(to: CGPoint(x: 136, y: 0))
                    rectangleCopy4.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                    rectangleCopy4.addLine(to: CGPoint(x: 156, y: 171))
                    rectangleCopy4.addCurve(to: CGPoint(x: 136, y: 191), controlPoint1: CGPoint(x: 156, y: 182.05), controlPoint2: CGPoint(x: 147.05, y: 191))
                    rectangleCopy4.addLine(to: CGPoint(x: 20, y: 191))
                    rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 171), controlPoint1: CGPoint(x: 8.95, y: 191), controlPoint2: CGPoint(x: 0, y: 182.05))
                    rectangleCopy4.addLine(to: CGPoint(x: 0, y: 20))
                    rectangleCopy4.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangleCopy4.close()
                    context.saveGState()
                    rectangleCopy4.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(rectangleCopy4.cgPath)
                    context.addRect(rectangleCopy4.bounds.insetBy(dx: -26, dy: -26))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -193, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangleCopy4.fill()
                        context.saveGState()
                        rectangleCopy4.lineWidth = 2
                        UIColor.black.setStroke()
                        rectangleCopy4.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    rectangleCopy4.usesEvenOddFillRule = true
                    UIColor(white: 0.925, alpha: 1).setFill()
                    rectangleCopy4.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy 4 (Outline Mask)
                    context.saveGState()
                    rectangleCopy4.addClip()
                    
                    /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                    // Warning: Image layers are not supported.
                    
                    /// Rectangle Copy 2
                    let rectangleCopy10 = UIBezierPath()
                    rectangleCopy10.move(to: CGPoint.zero)
                    rectangleCopy10.addLine(to: CGPoint(x: 156, y: 0))
                    rectangleCopy10.addLine(to: CGPoint(x: 156, y: 63))
                    rectangleCopy10.addLine(to: CGPoint(x: 0, y: 63))
                    rectangleCopy10.addLine(to: CGPoint.zero)
                    rectangleCopy10.close()
                    context.saveGState()
                    context.translateBy(x: -0, y: 158)
                    rectangleCopy10.usesEvenOddFillRule = true
                    UIColor(white: 0.212, alpha: 0.68).setFill()
                    rectangleCopy10.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy 4 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Vincent van Gogh
                let vincentVanGogh = NSMutableAttributedString(string: "Vincent van Gogh")
                vincentVanGogh.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: vincentVanGogh.length))
                context.saveGState()
                vincentVanGogh.draw(in: CGRect(x: 3, y: 166, width: 147, height: 20))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Dali
            do {
                context.saveGState()
                context.translateBy(x: 173, y: 0)
                
                /// Rectangle Copy
                let rectangleCopy = UIBezierPath()
                rectangleCopy.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy.addLine(to: CGPoint(x: 136, y: 0))
                rectangleCopy.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangleCopy.addLine(to: CGPoint(x: 156, y: 299))
                rectangleCopy.addCurve(to: CGPoint(x: 136, y: 319), controlPoint1: CGPoint(x: 156, y: 310.05), controlPoint2: CGPoint(x: 147.05, y: 319))
                rectangleCopy.addLine(to: CGPoint(x: 20, y: 319))
                rectangleCopy.addCurve(to: CGPoint(x: 0, y: 299), controlPoint1: CGPoint(x: 8.95, y: 319), controlPoint2: CGPoint(x: 0, y: 310.05))
                rectangleCopy.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy.close()
                context.saveGState()
                rectangleCopy.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy.cgPath)
                context.addRect(rectangleCopy.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy.fill()
                    context.saveGState()
                    rectangleCopy.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy.fill()
                context.restoreGState()
                
                /// Rectangle Copy (Outline Mask)
                context.saveGState()
                rectangleCopy.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle5 = UIBezierPath()
                rectangle5.move(to: CGPoint.zero)
                rectangle5.addLine(to: CGPoint(x: 156, y: 0))
                rectangle5.addLine(to: CGPoint(x: 156, y: 63))
                rectangle5.addLine(to: CGPoint(x: 0, y: 63))
                rectangle5.addLine(to: CGPoint.zero)
                rectangle5.close()
                context.saveGState()
                context.translateBy(x: 0, y: 290)
                rectangle5.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle5.fill()
                context.restoreGState()
                
                /// Salvador Dalí
                let salvadorDali = NSMutableAttributedString(string: "Salvador Dalí")
                salvadorDali.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: salvadorDali.length))
                context.saveGState()
                salvadorDali.draw(in: CGRect(x: 12, y: 294, width: 112, height: 20))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add
            do {
                context.saveGState()
                
                /// Rectangle
                let rectangle6 = UIBezierPath()
                rectangle6.move(to: CGPoint(x: 20, y: 0))
                rectangle6.addLine(to: CGPoint(x: 136, y: 0))
                rectangle6.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangle6.addLine(to: CGPoint(x: 156, y: 136))
                rectangle6.addCurve(to: CGPoint(x: 136, y: 156), controlPoint1: CGPoint(x: 156, y: 147.05), controlPoint2: CGPoint(x: 147.05, y: 156))
                rectangle6.addLine(to: CGPoint(x: 20, y: 156))
                rectangle6.addCurve(to: CGPoint(x: 0, y: 136), controlPoint1: CGPoint(x: 8.95, y: 156), controlPoint2: CGPoint(x: 0, y: 147.05))
                rectangle6.addLine(to: CGPoint(x: 0, y: 20))
                rectangle6.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangle6.close()
                context.saveGState()
                rectangle6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle6.cgPath)
                context.addRect(rectangle6.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle6.fill()
                    context.saveGState()
                    rectangle6.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangle6.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangle6.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 1).setFill()
                rectangle6.fill()
                context.restoreGState()
                
                /// Add Style
                let addStyle = NSMutableAttributedString(string: "Add Style")
                addStyle.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: addStyle.length))
                addStyle.addAttribute(.kern, value: 0.92, range: NSRange(location: 0, length: addStyle.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 11
                    paragraphStyle.minimumLineHeight = 11
                    addStyle.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addStyle.length))
                }
                addStyle.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: addStyle.length))
                context.saveGState()
                addStyle.draw(in: CGRect(x: 49, y: 126, width: 62, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask = UIBezierPath()
                mask.move(to: CGPoint(x: 32.5, y: 65))
                mask.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask.close()
                context.saveGState()
                context.translateBy(x: 46, y: 47)
                mask.usesEvenOddFillRule = true
                UIColor(white: 0.478, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.apply(CGAffineTransform(translationX: 46, y: 47))
                mask.addClip()
                
                /// Plus
                do {
                    context.saveGState()
                    context.translateBy(x: 67, y: 69)
                    
                    /// Path 2
                    let path2 = UIBezierPath()
                    path2.move(to: CGPoint.zero)
                    path2.addLine(to: CGPoint(x: 21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 9.5)
                    path2.lineWidth = 2
                    UIColor(white: 0.945, alpha: 1).setStroke()
                    path2.stroke()
                    context.restoreGState()
                    
                    /// Path 3
                    let path3 = UIBezierPath()
                    path3.move(to: CGPoint.zero)
                    path3.addLine(to: CGPoint(x: 0, y: 21.5))
                    context.saveGState()
                    context.translateBy(x: 10.5, y: 0)
                    path3.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    path3.fill()
                    path3.lineWidth = 2
                    UIColor(white: 0.945, alpha: 1).setStroke()
                    path3.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// BottomBar 2
        do {
            context.saveGState()
            context.translateBy(x: -20, y: 999)
            
            /// Rectangle
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint.zero)
            rectangle7.addLine(to: CGPoint(x: 399, y: 0))
            rectangle7.addLine(to: CGPoint(x: 399, y: 118))
            rectangle7.addLine(to: CGPoint(x: 0, y: 118))
            rectangle7.addLine(to: CGPoint.zero)
            rectangle7.close()
            context.saveGState()
            rectangle7.usesEvenOddFillRule = true
            UIColor(white: 0, alpha: 0.84).setFill()
            rectangle7.fill()
            rectangle7.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle7.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 45, y: 7)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy11 = UIBezierPath()
                rectangleCopy11.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy11.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy11.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy11.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy11.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy11.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy11.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy11.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy11.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy11.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy11.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangleCopy11.fill()
                rectangleCopy11.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangleCopy11.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 2, y: 0))
                rectangle8.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle8.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle8.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle8.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle8.addLine(to: CGPoint(x: 0, y: 2))
                rectangle8.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle8.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle8.fill()
                rectangle8.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangle8.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Header 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -20)
            
            /// Rectangle
            let rectangle9 = UIBezierPath()
            rectangle9.move(to: CGPoint.zero)
            rectangle9.addLine(to: CGPoint(x: 391, y: 0))
            rectangle9.addLine(to: CGPoint(x: 391, y: 139))
            rectangle9.addLine(to: CGPoint(x: 0, y: 139))
            rectangle9.addLine(to: CGPoint.zero)
            rectangle9.close()
            context.saveGState()
            rectangle9.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle9.fill()
            rectangle9.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle9.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// DownArrow
        do {
            context.saveGState()
            context.translateBy(x: 341, y: 84)
            
            /// Rectangle
            let rectangle10 = UIBezierPath()
            rectangle10.move(to: CGPoint(x: 5, y: 0))
            rectangle10.addLine(to: CGPoint(x: 19, y: 0))
            rectangle10.addCurve(to: CGPoint(x: 24, y: 5), controlPoint1: CGPoint(x: 21.76, y: 0), controlPoint2: CGPoint(x: 24, y: 2.24))
            rectangle10.addLine(to: CGPoint(x: 24, y: 19))
            rectangle10.addCurve(to: CGPoint(x: 19, y: 24), controlPoint1: CGPoint(x: 24, y: 21.76), controlPoint2: CGPoint(x: 21.76, y: 24))
            rectangle10.addLine(to: CGPoint(x: 5, y: 24))
            rectangle10.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 2.24, y: 24), controlPoint2: CGPoint(x: 0, y: 21.76))
            rectangle10.addLine(to: CGPoint(x: 0, y: 5))
            rectangle10.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
            rectangle10.close()
            context.saveGState()
            rectangle10.lineWidth = 2
            UIColor.white.setStroke()
            rectangle10.stroke()
            context.restoreGState()
            
            /// New shape
            let newShape = UIBezierPath()
            newShape.move(to: CGPoint(x: 1.44, y: 0))
            newShape.addLine(to: CGPoint(x: 7.68, y: 3.84))
            newShape.addLine(to: CGPoint(x: 13.92, y: 0))
            newShape.addLine(to: CGPoint(x: 15.36, y: 2.4))
            newShape.addLine(to: CGPoint(x: 7.68, y: 7.2))
            newShape.addLine(to: CGPoint(x: 0, y: 2.4))
            newShape.addLine(to: CGPoint(x: 1.44, y: 0))
            newShape.close()
            context.saveGState()
            context.translateBy(x: 4.8, y: 9.12)
            newShape.usesEvenOddFillRule = true
            UIColor.white.setFill()
            newShape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFiltersCopy3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1087), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1087), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1087)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background 2
        let background2 = UIBezierPath()
        background2.move(to: CGPoint.zero)
        background2.addLine(to: CGPoint(x: 490, y: 0))
        background2.addLine(to: CGPoint(x: 490, y: 1129))
        background2.addLine(to: CGPoint(x: 0, y: 1129))
        background2.addLine(to: CGPoint.zero)
        background2.close()
        context.saveGState()
        context.translateBy(x: -58, y: -6)
        background2.usesEvenOddFillRule = true
        UIColor(white: 0.075, alpha: 1).setFill()
        background2.fill()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 22, y: 258)
            
            /// Morandi
            do {
                context.saveGState()
                context.translateBy(x: 175, y: 340)
                
                /// Mask group
                do {
                    context.saveGState()
                    
                    /// Rectangle Copy 3
                    let rectangleCopy3 = UIBezierPath()
                    rectangleCopy3.move(to: CGPoint(x: 20, y: 0))
                    rectangleCopy3.addLine(to: CGPoint(x: 136, y: 0))
                    rectangleCopy3.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                    rectangleCopy3.addLine(to: CGPoint(x: 156, y: 202))
                    rectangleCopy3.addCurve(to: CGPoint(x: 136, y: 222), controlPoint1: CGPoint(x: 156, y: 213.05), controlPoint2: CGPoint(x: 147.05, y: 222))
                    rectangleCopy3.addLine(to: CGPoint(x: 20, y: 222))
                    rectangleCopy3.addCurve(to: CGPoint(x: 0, y: 202), controlPoint1: CGPoint(x: 8.95, y: 222), controlPoint2: CGPoint(x: 0, y: 213.05))
                    rectangleCopy3.addLine(to: CGPoint(x: 0, y: 20))
                    rectangleCopy3.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangleCopy3.close()
                    context.saveGState()
                    rectangleCopy3.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(rectangleCopy3.cgPath)
                    context.addRect(rectangleCopy3.bounds.insetBy(dx: -26, dy: -26))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -193, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangleCopy3.fill()
                        context.saveGState()
                        rectangleCopy3.lineWidth = 2
                        UIColor.black.setStroke()
                        rectangleCopy3.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    rectangleCopy3.usesEvenOddFillRule = true
                    UIColor(white: 0.925, alpha: 1).setFill()
                    rectangleCopy3.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy 3 (Outline Mask)
                    context.saveGState()
                    rectangleCopy3.addClip()
                    
                    /// morandi
                    // Warning: Image layers are not supported.
                    
                    /// Rectangle
                    let rectangle = UIBezierPath()
                    rectangle.move(to: CGPoint.zero)
                    rectangle.addLine(to: CGPoint(x: 156, y: 0))
                    rectangle.addLine(to: CGPoint(x: 156, y: 63))
                    rectangle.addLine(to: CGPoint(x: 0, y: 63))
                    rectangle.addLine(to: CGPoint.zero)
                    rectangle.close()
                    context.saveGState()
                    context.translateBy(x: 0, y: 160)
                    rectangle.usesEvenOddFillRule = true
                    UIColor(white: 0.212, alpha: 0.68).setFill()
                    rectangle.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy 3 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Realism 1890-1964 It
                let realism18901964It = NSMutableAttributedString(string: "Realism\n1890-1964 Italian Painter")
                realism18901964It.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: realism18901964It.length))
                realism18901964It.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: realism18901964It.length))
                realism18901964It.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: realism18901964It.length))
                context.saveGState()
                realism18901964It.draw(in: CGRect(x: 6, y: 186, width: 157, height: 27))
                context.restoreGState()
                
                /// Giorgio Morandi
                let giorgioMorandi = NSMutableAttributedString(string: "Giorgio Morandi")
                giorgioMorandi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: giorgioMorandi.length))
                context.saveGState()
                giorgioMorandi.draw(in: CGRect(x: 6, y: 168, width: 148, height: 53))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Monet
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 622)
                
                /// Rectangle Copy 2
                let rectangleCopy2 = UIBezierPath()
                rectangleCopy2.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy2.addLine(to: CGPoint(x: 316, y: 0))
                rectangleCopy2.addCurve(to: CGPoint(x: 336, y: 20), controlPoint1: CGPoint(x: 327.05, y: 0), controlPoint2: CGPoint(x: 336, y: 8.95))
                rectangleCopy2.addLine(to: CGPoint(x: 336, y: 167))
                rectangleCopy2.addCurve(to: CGPoint(x: 316, y: 187), controlPoint1: CGPoint(x: 336, y: 178.05), controlPoint2: CGPoint(x: 327.05, y: 187))
                rectangleCopy2.addLine(to: CGPoint(x: 20, y: 187))
                rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 167), controlPoint1: CGPoint(x: 8.95, y: 187), controlPoint2: CGPoint(x: 0, y: 178.05))
                rectangleCopy2.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy2.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy2.close()
                context.saveGState()
                rectangleCopy2.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy2.cgPath)
                context.addRect(rectangleCopy2.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -373, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 377, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy2.fill()
                    context.saveGState()
                    rectangleCopy2.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy2.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy2.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy2.fill()
                context.restoreGState()
                
                /// Rectangle Copy 2 (Outline Mask)
                context.saveGState()
                rectangleCopy2.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle3 = UIBezierPath()
                rectangle3.move(to: CGPoint.zero)
                rectangle3.addLine(to: CGPoint(x: 339, y: 0))
                rectangle3.addLine(to: CGPoint(x: 339, y: 49))
                rectangle3.addLine(to: CGPoint(x: 0, y: 49))
                rectangle3.addLine(to: CGPoint.zero)
                rectangle3.close()
                context.saveGState()
                context.translateBy(x: -2, y: 138)
                rectangle3.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle3.fill()
                context.restoreGState()
                
                /// Impressionism 1840-1
                let impressionism18401 = NSMutableAttributedString(string: "Impressionism\n1840-1926  French Painter")
                impressionism18401.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: impressionism18401.length))
                impressionism18401.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: impressionism18401.length))
                impressionism18401.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: impressionism18401.length))
                context.saveGState()
                impressionism18401.draw(in: CGRect(x: 9, y: 160, width: 163, height: 27))
                context.restoreGState()
                
                /// Claude Monet
                let claudeMonet = NSMutableAttributedString(string: "Claude Monet")
                claudeMonet.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: claudeMonet.length))
                context.saveGState()
                claudeMonet.draw(in: CGRect(x: 9, y: 142, width: 116, height: 20))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Picasso
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 379)
                
                /// Rectangle Copy 3
                let rectangleCopy9 = UIBezierPath()
                rectangleCopy9.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy9.addLine(to: CGPoint(x: 136, y: 0))
                rectangleCopy9.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangleCopy9.addLine(to: CGPoint(x: 156, y: 202))
                rectangleCopy9.addCurve(to: CGPoint(x: 136, y: 222), controlPoint1: CGPoint(x: 156, y: 213.05), controlPoint2: CGPoint(x: 147.05, y: 222))
                rectangleCopy9.addLine(to: CGPoint(x: 20, y: 222))
                rectangleCopy9.addCurve(to: CGPoint(x: 0, y: 202), controlPoint1: CGPoint(x: 8.95, y: 222), controlPoint2: CGPoint(x: 0, y: 213.05))
                rectangleCopy9.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy9.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy9.close()
                context.saveGState()
                rectangleCopy9.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy9.cgPath)
                context.addRect(rectangleCopy9.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy9.fill()
                    context.saveGState()
                    rectangleCopy9.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy9.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy9.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy9.fill()
                context.restoreGState()
                
                /// Rectangle Copy 3 (Outline Mask)
                context.saveGState()
                rectangleCopy9.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle4 = UIBezierPath()
                rectangle4.move(to: CGPoint.zero)
                rectangle4.addLine(to: CGPoint(x: 156, y: 0))
                rectangle4.addLine(to: CGPoint(x: 156, y: 63))
                rectangle4.addLine(to: CGPoint(x: 0, y: 63))
                rectangle4.addLine(to: CGPoint.zero)
                rectangle4.close()
                context.saveGState()
                context.translateBy(x: 0, y: 159)
                rectangle4.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle4.fill()
                context.restoreGState()
                
                /// Cubism 1973-1881 Spa
                let cubism19731881Spa = NSMutableAttributedString(string: "Cubism\n1973-1881 Spanish Painter")
                cubism19731881Spa.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: cubism19731881Spa.length))
                cubism19731881Spa.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: cubism19731881Spa.length))
                cubism19731881Spa.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: cubism19731881Spa.length))
                context.saveGState()
                cubism19731881Spa.draw(in: CGRect(x: 6, y: 184, width: 156, height: 27))
                context.restoreGState()
                
                /// Pablo Picasso
                let pabloPicasso = NSMutableAttributedString(string: "Pablo Picasso")
                pabloPicasso.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: pabloPicasso.length))
                context.saveGState()
                pabloPicasso.draw(in: CGRect(x: 6, y: 165, width: 117, height: 20))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy 3 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Van Gogh
            do {
                context.saveGState()
                context.translateBy(x: 1, y: 174)
                
                /// Mask group
                do {
                    context.saveGState()
                    
                    /// Rectangle Copy 4
                    let rectangleCopy4 = UIBezierPath()
                    rectangleCopy4.move(to: CGPoint(x: 20, y: 0))
                    rectangleCopy4.addLine(to: CGPoint(x: 136, y: 0))
                    rectangleCopy4.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                    rectangleCopy4.addLine(to: CGPoint(x: 156, y: 171))
                    rectangleCopy4.addCurve(to: CGPoint(x: 136, y: 191), controlPoint1: CGPoint(x: 156, y: 182.05), controlPoint2: CGPoint(x: 147.05, y: 191))
                    rectangleCopy4.addLine(to: CGPoint(x: 20, y: 191))
                    rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 171), controlPoint1: CGPoint(x: 8.95, y: 191), controlPoint2: CGPoint(x: 0, y: 182.05))
                    rectangleCopy4.addLine(to: CGPoint(x: 0, y: 20))
                    rectangleCopy4.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangleCopy4.close()
                    context.saveGState()
                    rectangleCopy4.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(rectangleCopy4.cgPath)
                    context.addRect(rectangleCopy4.bounds.insetBy(dx: -26, dy: -26))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -193, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        rectangleCopy4.fill()
                        context.saveGState()
                        rectangleCopy4.lineWidth = 2
                        UIColor.black.setStroke()
                        rectangleCopy4.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    rectangleCopy4.usesEvenOddFillRule = true
                    UIColor(white: 0.925, alpha: 1).setFill()
                    rectangleCopy4.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy 4 (Outline Mask)
                    context.saveGState()
                    rectangleCopy4.addClip()
                    
                    /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                    // Warning: Image layers are not supported.
                    
                    /// Rectangle Copy 2
                    let rectangleCopy10 = UIBezierPath()
                    rectangleCopy10.move(to: CGPoint.zero)
                    rectangleCopy10.addLine(to: CGPoint(x: 156, y: 0))
                    rectangleCopy10.addLine(to: CGPoint(x: 156, y: 63))
                    rectangleCopy10.addLine(to: CGPoint(x: 0, y: 63))
                    rectangleCopy10.addLine(to: CGPoint.zero)
                    rectangleCopy10.close()
                    context.saveGState()
                    context.translateBy(x: -0, y: 128)
                    rectangleCopy10.usesEvenOddFillRule = true
                    UIColor(white: 0.212, alpha: 0.68).setFill()
                    rectangleCopy10.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Rectangle Copy 4 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Vincent van Gogh
                let vincentVanGogh = NSMutableAttributedString(string: "Vincent van Gogh")
                vincentVanGogh.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: vincentVanGogh.length))
                context.saveGState()
                vincentVanGogh.draw(in: CGRect(x: 3, y: 136, width: 147, height: 20))
                context.restoreGState()
                
                /// Neo-Impressionism 18
                let neoImpressionism18 = NSMutableAttributedString(string: "Neo-Impressionism\n1853-1890 Dutch Painter")
                neoImpressionism18.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: neoImpressionism18.length))
                neoImpressionism18.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: neoImpressionism18.length))
                neoImpressionism18.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: neoImpressionism18.length))
                context.saveGState()
                neoImpressionism18.draw(in: CGRect(x: 2, y: 154, width: 174, height: 27))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Dali
            do {
                context.saveGState()
                context.translateBy(x: 173, y: 0)
                
                /// Rectangle Copy
                let rectangleCopy = UIBezierPath()
                rectangleCopy.move(to: CGPoint(x: 20, y: 0))
                rectangleCopy.addLine(to: CGPoint(x: 136, y: 0))
                rectangleCopy.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangleCopy.addLine(to: CGPoint(x: 156, y: 299))
                rectangleCopy.addCurve(to: CGPoint(x: 136, y: 319), controlPoint1: CGPoint(x: 156, y: 310.05), controlPoint2: CGPoint(x: 147.05, y: 319))
                rectangleCopy.addLine(to: CGPoint(x: 20, y: 319))
                rectangleCopy.addCurve(to: CGPoint(x: 0, y: 299), controlPoint1: CGPoint(x: 8.95, y: 319), controlPoint2: CGPoint(x: 0, y: 310.05))
                rectangleCopy.addLine(to: CGPoint(x: 0, y: 20))
                rectangleCopy.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangleCopy.close()
                context.saveGState()
                rectangleCopy.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangleCopy.cgPath)
                context.addRect(rectangleCopy.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangleCopy.fill()
                    context.saveGState()
                    rectangleCopy.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangleCopy.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangleCopy.usesEvenOddFillRule = true
                UIColor(white: 0.925, alpha: 1).setFill()
                rectangleCopy.fill()
                context.restoreGState()
                
                /// Rectangle Copy (Outline Mask)
                context.saveGState()
                rectangleCopy.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                /// Rectangle
                let rectangle5 = UIBezierPath()
                rectangle5.move(to: CGPoint.zero)
                rectangle5.addLine(to: CGPoint(x: 156, y: 0))
                rectangle5.addLine(to: CGPoint(x: 156, y: 63))
                rectangle5.addLine(to: CGPoint(x: 0, y: 63))
                rectangle5.addLine(to: CGPoint.zero)
                rectangle5.close()
                context.saveGState()
                context.translateBy(x: 0, y: 257)
                rectangle5.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 0.68).setFill()
                rectangle5.fill()
                context.restoreGState()
                
                /// Salvador Dalí
                let salvadorDali = NSMutableAttributedString(string: "Salvador Dalí")
                salvadorDali.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: salvadorDali.length))
                context.saveGState()
                salvadorDali.draw(in: CGRect(x: 5, y: 261, width: 112, height: 20))
                context.restoreGState()
                
                /// Surrealism 1904-1989 Spanish P
                let surrealism19041989SpanishP = NSMutableAttributedString(string: "Surrealism\n1904-1989 Spanish Painter")
                surrealism19041989SpanishP.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 0, length: surrealism19041989SpanishP.length))
                surrealism19041989SpanishP.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: surrealism19041989SpanishP.length))
                surrealism19041989SpanishP.addAttribute(.foregroundColor, value: UIColor(white: 0.945, alpha: 1), range: NSRange(location: 0, length: surrealism19041989SpanishP.length))
                context.saveGState()
                surrealism19041989SpanishP.draw(in: CGRect(x: 5, y: 279, width: 156, height: 27))
                context.restoreGState()
                
                context.restoreGState()
                // End Rectangle Copy (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add
            do {
                context.saveGState()
                
                /// Rectangle
                let rectangle6 = UIBezierPath()
                rectangle6.move(to: CGPoint(x: 20, y: 0))
                rectangle6.addLine(to: CGPoint(x: 136, y: 0))
                rectangle6.addCurve(to: CGPoint(x: 156, y: 20), controlPoint1: CGPoint(x: 147.05, y: 0), controlPoint2: CGPoint(x: 156, y: 8.95))
                rectangle6.addLine(to: CGPoint(x: 156, y: 136))
                rectangle6.addCurve(to: CGPoint(x: 136, y: 156), controlPoint1: CGPoint(x: 156, y: 147.05), controlPoint2: CGPoint(x: 147.05, y: 156))
                rectangle6.addLine(to: CGPoint(x: 20, y: 156))
                rectangle6.addCurve(to: CGPoint(x: 0, y: 136), controlPoint1: CGPoint(x: 8.95, y: 156), controlPoint2: CGPoint(x: 0, y: 147.05))
                rectangle6.addLine(to: CGPoint(x: 0, y: 20))
                rectangle6.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                rectangle6.close()
                context.saveGState()
                rectangle6.usesEvenOddFillRule = true
                context.saveGState()
                context.beginPath()
                context.addPath(rectangle6.cgPath)
                context.addRect(rectangle6.bounds.insetBy(dx: -26, dy: -26))
                context.clip(using: .evenOdd)
                context.translateBy(x: -193, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 197, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.1).cgColor)
                }
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    UIColor.black.setFill()
                    rectangle6.fill()
                    context.saveGState()
                    rectangle6.lineWidth = 2
                    UIColor.black.setStroke()
                    rectangle6.stroke()
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                rectangle6.usesEvenOddFillRule = true
                UIColor(white: 0.212, alpha: 1).setFill()
                rectangle6.fill()
                context.restoreGState()
                
                /// Add Style
                let addStyle = NSMutableAttributedString(string: "Add Style")
                addStyle.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: addStyle.length))
                addStyle.addAttribute(.kern, value: 0.92, range: NSRange(location: 0, length: addStyle.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 11
                    paragraphStyle.minimumLineHeight = 11
                    addStyle.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addStyle.length))
                }
                addStyle.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: addStyle.length))
                context.saveGState()
                addStyle.draw(in: CGRect(x: 49, y: 126, width: 62, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask = UIBezierPath()
                mask.move(to: CGPoint(x: 32.5, y: 65))
                mask.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask.close()
                context.saveGState()
                context.translateBy(x: 46, y: 47)
                mask.usesEvenOddFillRule = true
                UIColor(white: 0.478, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.apply(CGAffineTransform(translationX: 46, y: 47))
                mask.addClip()
                
                /// Plus
                do {
                    context.saveGState()
                    context.translateBy(x: 67, y: 69)
                    
                    /// Path 2
                    let path2 = UIBezierPath()
                    path2.move(to: CGPoint.zero)
                    path2.addLine(to: CGPoint(x: 21, y: 0))
                    context.saveGState()
                    context.translateBy(x: 0, y: 9.5)
                    path2.lineWidth = 2
                    UIColor(white: 0.945, alpha: 1).setStroke()
                    path2.stroke()
                    context.restoreGState()
                    
                    /// Path 3
                    let path3 = UIBezierPath()
                    path3.move(to: CGPoint.zero)
                    path3.addLine(to: CGPoint(x: 0, y: 21.5))
                    context.saveGState()
                    context.translateBy(x: 10.5, y: 0)
                    path3.usesEvenOddFillRule = true
                    UIColor.black.setFill()
                    path3.fill()
                    path3.lineWidth = 2
                    UIColor(white: 0.945, alpha: 1).setStroke()
                    path3.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// BottomBar 2
        do {
            context.saveGState()
            context.translateBy(x: -20, y: 999)
            
            /// Rectangle
            let rectangle7 = UIBezierPath()
            rectangle7.move(to: CGPoint.zero)
            rectangle7.addLine(to: CGPoint(x: 399, y: 0))
            rectangle7.addLine(to: CGPoint(x: 399, y: 118))
            rectangle7.addLine(to: CGPoint(x: 0, y: 118))
            rectangle7.addLine(to: CGPoint.zero)
            rectangle7.close()
            context.saveGState()
            rectangle7.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle7.fill()
            rectangle7.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle7.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 45, y: 7)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy11 = UIBezierPath()
                rectangleCopy11.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy11.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy11.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy11.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy11.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy11.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy11.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy11.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy11.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy11.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy11.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangleCopy11.fill()
                rectangleCopy11.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangleCopy11.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle8 = UIBezierPath()
                rectangle8.move(to: CGPoint(x: 2, y: 0))
                rectangle8.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle8.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle8.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle8.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle8.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle8.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle8.addLine(to: CGPoint(x: 0, y: 2))
                rectangle8.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle8.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle8.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle8.fill()
                rectangle8.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangle8.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Header 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -20)
            
            /// Rectangle
            let rectangle9 = UIBezierPath()
            rectangle9.move(to: CGPoint.zero)
            rectangle9.addLine(to: CGPoint(x: 391, y: 0))
            rectangle9.addLine(to: CGPoint(x: 391, y: 139))
            rectangle9.addLine(to: CGPoint(x: 0, y: 139))
            rectangle9.addLine(to: CGPoint.zero)
            rectangle9.close()
            context.saveGState()
            rectangle9.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle9.fill()
            rectangle9.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle9.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// Rectangle Copy 3
        let rectangleCopy12 = UIBezierPath()
        rectangleCopy12.move(to: CGPoint.zero)
        rectangleCopy12.addLine(to: CGPoint(x: 375, y: 0))
        rectangleCopy12.addLine(to: CGPoint(x: 375, y: 768))
        rectangleCopy12.addLine(to: CGPoint(x: 0, y: 768))
        rectangleCopy12.addLine(to: CGPoint.zero)
        rectangleCopy12.close()
        context.saveGState()
        context.translateBy(x: -0, y: 230)
        // Warning: Blur effects are not supported.
        rectangleCopy12.usesEvenOddFillRule = true
        UIColor(white: 0.137, alpha: 0.78).setFill()
        rectangleCopy12.fill()
        context.restoreGState()
        
        /// Dropdown 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: 119)
            
            /// Rectangle Copy
            let rectangleCopy13 = UIBezierPath()
            rectangleCopy13.move(to: CGPoint.zero)
            rectangleCopy13.addLine(to: CGPoint(x: 401, y: 0))
            rectangleCopy13.addLine(to: CGPoint(x: 401, y: 121))
            rectangleCopy13.addLine(to: CGPoint(x: 0, y: 121))
            rectangleCopy13.addLine(to: CGPoint.zero)
            rectangleCopy13.close()
            context.saveGState()
            rectangleCopy13.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangleCopy13.fill()
            context.saveGState()
            rectangleCopy13.lineWidth = 2
            context.beginPath()
            context.addPath(rectangleCopy13.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.725, alpha: 1).setStroke()
            rectangleCopy13.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Landscape Copy
            // Warning: New symbols are not supported.
            
            /// Portrait Copy
            // Warning: New symbols are not supported.
            
            /// Cityscape Copy
            // Warning: New symbols are not supported.
            
            /// still-life Copy
            // Warning: New symbols are not supported.
            
            /// Nature Copy
            // Warning: New symbols are not supported.
            
            /// Tags
            let tags = NSMutableAttributedString(string: "Tags")
            tags.addAttribute(.font, value: UIFont(name: "Helvetica", size: 13)!, range: NSRange(location: 0, length: tags.length))
            tags.addAttribute(.kern, value: 0.16, range: NSRange(location: 0, length: tags.length))
            tags.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: tags.length))
            context.saveGState()
            tags.draw(at: CGPoint(x: 38, y: 13))
            context.restoreGState()
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 355, y: 96)
                context.rotate(by: CGFloat.pi)
                context.translateBy(x: -12, y: -12)
                
                /// Rectangle
                let rectangle10 = UIBezierPath()
                rectangle10.move(to: CGPoint(x: 5, y: 0))
                rectangle10.addLine(to: CGPoint(x: 19, y: 0))
                rectangle10.addCurve(to: CGPoint(x: 24, y: 5), controlPoint1: CGPoint(x: 21.76, y: 0), controlPoint2: CGPoint(x: 24, y: 2.24))
                rectangle10.addLine(to: CGPoint(x: 24, y: 19))
                rectangle10.addCurve(to: CGPoint(x: 19, y: 24), controlPoint1: CGPoint(x: 24, y: 21.76), controlPoint2: CGPoint(x: 21.76, y: 24))
                rectangle10.addLine(to: CGPoint(x: 5, y: 24))
                rectangle10.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 2.24, y: 24), controlPoint2: CGPoint(x: 0, y: 21.76))
                rectangle10.addLine(to: CGPoint(x: 0, y: 5))
                rectangle10.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                rectangle10.close()
                context.saveGState()
                rectangle10.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle10.fill()
                context.restoreGState()
                
                /// New shape
                let newShape = UIBezierPath()
                newShape.move(to: CGPoint(x: 1.44, y: 0))
                newShape.addLine(to: CGPoint(x: 7.68, y: 3.84))
                newShape.addLine(to: CGPoint(x: 13.92, y: 0))
                newShape.addLine(to: CGPoint(x: 15.36, y: 2.4))
                newShape.addLine(to: CGPoint(x: 7.68, y: 7.2))
                newShape.addLine(to: CGPoint(x: 0, y: 2.4))
                newShape.addLine(to: CGPoint(x: 1.44, y: 0))
                newShape.close()
                context.saveGState()
                context.translateBy(x: 4.8, y: 8.12)
                newShape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                newShape.fill()
                newShape.lineWidth = 1
                UIColor.black.setStroke()
                newShape.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFiltersCopy(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1000), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1000), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1000)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background 2
        let background2 = UIBezierPath()
        background2.move(to: CGPoint.zero)
        background2.addLine(to: CGPoint(x: 490, y: 0))
        background2.addLine(to: CGPoint(x: 490, y: 1348))
        background2.addLine(to: CGPoint(x: 0, y: 1348))
        background2.addLine(to: CGPoint.zero)
        background2.close()
        context.saveGState()
        context.translateBy(x: -62, y: -20)
        background2.usesEvenOddFillRule = true
        UIColor.black.setFill()
        background2.fill()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 11, y: 167)
            
            /// Rectangle Copy 4
            let rectangleCopy4 = UIBezierPath()
            rectangleCopy4.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy4.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy4.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy4.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy4.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy4.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy4.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy4.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy4.close()
            context.saveGState()
            context.translateBy(x: 0, y: 671)
            rectangleCopy4.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy4.cgPath)
            context.addRect(rectangleCopy4.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy4.fill()
                context.saveGState()
                rectangleCopy4.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy4.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy4.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy4.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 19, y: 0))
            rectangle.addLine(to: CGPoint(x: 333, y: 0))
            rectangle.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangle.addLine(to: CGPoint(x: 352, y: 93))
            rectangle.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangle.addLine(to: CGPoint(x: 19, y: 112))
            rectangle.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangle.addLine(to: CGPoint(x: 0, y: 19))
            rectangle.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangle.close()
            context.saveGState()
            rectangle.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.addRect(rectangle.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle.fill()
                context.saveGState()
                rectangle.lineWidth = 2
                UIColor.black.setStroke()
                rectangle.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangle.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangle.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint(x: 19, y: 0))
            rectangle3.addLine(to: CGPoint(x: 333, y: 0))
            rectangle3.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangle3.addLine(to: CGPoint(x: 352, y: 93))
            rectangle3.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangle3.addLine(to: CGPoint(x: 19, y: 112))
            rectangle3.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangle3.addLine(to: CGPoint(x: 0, y: 19))
            rectangle3.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangle3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 134)
            rectangle3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.addRect(rectangle3.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangle3.fill()
                context.saveGState()
                rectangle3.lineWidth = 2
                UIColor.black.setStroke()
                rectangle3.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangle3.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangle3.fill()
            context.restoreGState()
            
            /// Rectangle Copy
            let rectangleCopy = UIBezierPath()
            rectangleCopy.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy.close()
            context.saveGState()
            context.translateBy(x: 0, y: 268)
            rectangleCopy.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy.cgPath)
            context.addRect(rectangleCopy.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy.fill()
                context.saveGState()
                rectangleCopy.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy.fill()
            context.restoreGState()
            
            /// Rectangle Copy 2
            let rectangleCopy2 = UIBezierPath()
            rectangleCopy2.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy2.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy2.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy2.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy2.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy2.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy2.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy2.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy2.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 402)
            rectangleCopy2.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy2.cgPath)
            context.addRect(rectangleCopy2.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy2.fill()
                context.saveGState()
                rectangleCopy2.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy2.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy2.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy2.fill()
            context.restoreGState()
            
            /// Rectangle Copy 3
            let rectangleCopy3 = UIBezierPath()
            rectangleCopy3.move(to: CGPoint(x: 19, y: 0))
            rectangleCopy3.addLine(to: CGPoint(x: 333, y: 0))
            rectangleCopy3.addCurve(to: CGPoint(x: 352, y: 19), controlPoint1: CGPoint(x: 343.49, y: 0), controlPoint2: CGPoint(x: 352, y: 8.51))
            rectangleCopy3.addLine(to: CGPoint(x: 352, y: 93))
            rectangleCopy3.addCurve(to: CGPoint(x: 333, y: 112), controlPoint1: CGPoint(x: 352, y: 103.49), controlPoint2: CGPoint(x: 343.49, y: 112))
            rectangleCopy3.addLine(to: CGPoint(x: 19, y: 112))
            rectangleCopy3.addCurve(to: CGPoint(x: 0, y: 93), controlPoint1: CGPoint(x: 8.51, y: 112), controlPoint2: CGPoint(x: 0, y: 103.49))
            rectangleCopy3.addLine(to: CGPoint(x: 0, y: 19))
            rectangleCopy3.addCurve(to: CGPoint(x: 19, y: 0), controlPoint1: CGPoint(x: 0, y: 8.51), controlPoint2: CGPoint(x: 8.51, y: 0))
            rectangleCopy3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 536)
            rectangleCopy3.usesEvenOddFillRule = true
            context.saveGState()
            context.beginPath()
            context.addPath(rectangleCopy3.cgPath)
            context.addRect(rectangleCopy3.bounds.insetBy(dx: -26, dy: -26))
            context.clip(using: .evenOdd)
            context.translateBy(x: -389, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 393, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 12 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 1, alpha: 0.44).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor.black.setFill()
                rectangleCopy3.fill()
                context.saveGState()
                rectangleCopy3.lineWidth = 2
                UIColor.black.setStroke()
                rectangleCopy3.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            rectangleCopy3.usesEvenOddFillRule = true
            UIColor(white: 0.925, alpha: 1).setFill()
            rectangleCopy3.fill()
            context.restoreGState()
            
            /// Van Gogh
            do {
                context.saveGState()
                context.translateBy(x: 27.18, y: 691)
                
                /// Neo-Impressionism 18
                let neoImpressionism18 = NSMutableAttributedString(string: "Neo-Impressionism\n1853-1890 Dutch Painter")
                neoImpressionism18.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: neoImpressionism18.length))
                neoImpressionism18.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: neoImpressionism18.length))
                context.saveGState()
                neoImpressionism18.draw(in: CGRect(x: 99.82, y: 33, width: 174, height: 36))
                context.restoreGState()
                
                /// Vincent van Gogh
                let vincentVanGogh = NSMutableAttributedString(string: "Vincent van Gogh")
                vincentVanGogh.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: vincentVanGogh.length))
                vincentVanGogh.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: vincentVanGogh.length))
                context.saveGState()
                vincentVanGogh.draw(in: CGRect(x: 100.82, y: 10, width: 147, height: 27))
                context.restoreGState()
                
                /// Oval Copy 4
                let ovalCopy4 = UIBezierPath()
                ovalCopy4.move(to: CGPoint(x: 32.48, y: 65))
                ovalCopy4.addCurve(to: CGPoint(x: 64.96, y: 32.5), controlPoint1: CGPoint(x: 50.42, y: 65), controlPoint2: CGPoint(x: 64.96, y: 50.45))
                ovalCopy4.addCurve(to: CGPoint(x: 32.48, y: 0), controlPoint1: CGPoint(x: 64.96, y: 14.55), controlPoint2: CGPoint(x: 50.42, y: 0))
                ovalCopy4.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.54, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                ovalCopy4.addCurve(to: CGPoint(x: 32.48, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.54, y: 65))
                ovalCopy4.close()
                context.saveGState()
                ovalCopy4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy4.fill()
                context.saveGState()
                ovalCopy4.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy4.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy4.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 4 (Outline Mask)
                context.saveGState()
                ovalCopy4.addClip()
                
                /// Starry-Night-canvas-Vincent-van-Gogh-New-1889
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 4 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Morandi
            do {
                context.saveGState()
                context.translateBy(x: 27.36, y: 556)
                
                /// Realism 1890-1964 It
                let realism18901964It = NSMutableAttributedString(string: "Realism\n1890-1964 Italian Painter")
                realism18901964It.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: realism18901964It.length))
                realism18901964It.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: realism18901964It.length))
                context.saveGState()
                realism18901964It.draw(in: CGRect(x: 99.64, y: 35, width: 157, height: 36))
                context.restoreGState()
                
                /// Giorgio Morandi
                let giorgioMorandi = NSMutableAttributedString(string: "Giorgio Morandi")
                giorgioMorandi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: giorgioMorandi.length))
                giorgioMorandi.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: giorgioMorandi.length))
                context.saveGState()
                giorgioMorandi.draw(in: CGRect(x: 99.64, y: 12, width: 148, height: 53))
                context.restoreGState()
                
                /// Oval Copy 3
                let ovalCopy3 = UIBezierPath()
                ovalCopy3.move(to: CGPoint(x: 32.33, y: 65))
                ovalCopy3.addCurve(to: CGPoint(x: 64.65, y: 32.5), controlPoint1: CGPoint(x: 50.18, y: 65), controlPoint2: CGPoint(x: 64.65, y: 50.45))
                ovalCopy3.addCurve(to: CGPoint(x: 32.33, y: 0), controlPoint1: CGPoint(x: 64.65, y: 14.55), controlPoint2: CGPoint(x: 50.18, y: 0))
                ovalCopy3.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.47, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                ovalCopy3.addCurve(to: CGPoint(x: 32.33, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.47, y: 65))
                ovalCopy3.close()
                context.saveGState()
                ovalCopy3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy3.fill()
                context.saveGState()
                ovalCopy3.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy3.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy3.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 3 (Outline Mask)
                context.saveGState()
                ovalCopy3.addClip()
                
                /// morandi
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 3 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Monet
            do {
                context.saveGState()
                context.translateBy(x: 27.67, y: 422.53)
                
                /// Impressionism 1840-1
                let impressionism18401 = NSMutableAttributedString(string: "Impressionism\n1840-1926  French Painter")
                impressionism18401.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: impressionism18401.length))
                impressionism18401.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: impressionism18401.length))
                context.saveGState()
                impressionism18401.draw(in: CGRect(x: 99.33, y: 31.47, width: 163, height: 36))
                context.restoreGState()
                
                /// Claude Monet
                let claudeMonet = NSMutableAttributedString(string: "Claude Monet")
                claudeMonet.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: claudeMonet.length))
                claudeMonet.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: claudeMonet.length))
                context.saveGState()
                claudeMonet.draw(in: CGRect(x: 99.33, y: 11.47, width: 116, height: 27))
                context.restoreGState()
                
                /// Oval Copy 2
                let ovalCopy2 = UIBezierPath()
                ovalCopy2.move(to: CGPoint(x: 32.33, y: 64.94))
                ovalCopy2.addCurve(to: CGPoint(x: 64.65, y: 32.47), controlPoint1: CGPoint(x: 50.18, y: 64.94), controlPoint2: CGPoint(x: 64.65, y: 50.4))
                ovalCopy2.addCurve(to: CGPoint(x: 32.33, y: 0), controlPoint1: CGPoint(x: 64.65, y: 14.54), controlPoint2: CGPoint(x: 50.18, y: 0))
                ovalCopy2.addCurve(to: CGPoint(x: 0, y: 32.47), controlPoint1: CGPoint(x: 14.47, y: 0), controlPoint2: CGPoint(x: 0, y: 14.54))
                ovalCopy2.addCurve(to: CGPoint(x: 32.33, y: 64.94), controlPoint1: CGPoint(x: 0, y: 50.4), controlPoint2: CGPoint(x: 14.47, y: 64.94))
                ovalCopy2.close()
                context.saveGState()
                ovalCopy2.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                ovalCopy2.fill()
                context.saveGState()
                ovalCopy2.lineWidth = 2
                context.beginPath()
                context.addPath(ovalCopy2.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.592, alpha: 1).setStroke()
                ovalCopy2.stroke()
                context.restoreGState()
                context.restoreGState()
                
                /// Oval Copy 2 (Outline Mask)
                context.saveGState()
                ovalCopy2.addClip()
                
                /// https___blogs-images.forbes.com_natashagural_files_2019_06_Claude-Monet-Nympheas-1200x1249
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Oval Copy 2 (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Dali
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 288)
                
                /// Surrealism 1904-1989
                let surrealism19041989 = NSMutableAttributedString(string: "Surrealism\n1904-1989 Spanish Painter")
                surrealism19041989.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: surrealism19041989.length))
                surrealism19041989.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: surrealism19041989.length))
                context.saveGState()
                surrealism19041989.draw(in: CGRect(x: 101, y: 35, width: 156, height: 36))
                context.restoreGState()
                
                /// Salvador Dalí
                let salvadorDali = NSMutableAttributedString(string: "Salvador Dalí")
                salvadorDali.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: salvadorDali.length))
                salvadorDali.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: salvadorDali.length))
                context.saveGState()
                salvadorDali.draw(in: CGRect(x: 101, y: 13, width: 112, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask = UIBezierPath()
                mask.move(to: CGPoint(x: 32.5, y: 65))
                mask.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask.close()
                context.saveGState()
                mask.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask.addClip()
                
                /// 611xE8dDSWL._SL1200_
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Picasso
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 153)
                
                /// Cubism 1973-1881 Spa
                let cubism19731881Spa = NSMutableAttributedString(string: "Cubism\n1973-1881 Spanish Painter")
                cubism19731881Spa.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 12)!, range: NSRange(location: 0, length: cubism19731881Spa.length))
                cubism19731881Spa.addAttribute(.kern, value: 0.15, range: NSRange(location: 0, length: cubism19731881Spa.length))
                context.saveGState()
                cubism19731881Spa.draw(in: CGRect(x: 101, y: 37, width: 156, height: 36))
                context.restoreGState()
                
                /// Pablo Picasso
                let pabloPicasso = NSMutableAttributedString(string: "Pablo Picasso")
                pabloPicasso.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: pabloPicasso.length))
                pabloPicasso.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: pabloPicasso.length))
                context.saveGState()
                pabloPicasso.draw(in: CGRect(x: 101, y: 15, width: 117, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask3 = UIBezierPath()
                mask3.move(to: CGPoint(x: 32.5, y: 65))
                mask3.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask3.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask3.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask3.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask3.close()
                context.saveGState()
                mask3.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask3.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask3.addClip()
                
                /// 12_picaso
                // Warning: Image layers are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            /// Add
            do {
                context.saveGState()
                context.translateBy(x: 27, y: 19)
                
                /// Add Your Own Filter
                let addYourOwnFilter = NSMutableAttributedString(string: "Add Your Own Filter")
                addYourOwnFilter.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: addYourOwnFilter.length))
                addYourOwnFilter.addAttribute(.kern, value: 0.23, range: NSRange(location: 0, length: addYourOwnFilter.length))
                context.saveGState()
                addYourOwnFilter.draw(in: CGRect(x: 88, y: 22, width: 189, height: 27))
                context.restoreGState()
                
                /// Mask
                let mask4 = UIBezierPath()
                mask4.move(to: CGPoint(x: 32.5, y: 65))
                mask4.addCurve(to: CGPoint(x: 65, y: 32.5), controlPoint1: CGPoint(x: 50.45, y: 65), controlPoint2: CGPoint(x: 65, y: 50.45))
                mask4.addCurve(to: CGPoint(x: 32.5, y: 0), controlPoint1: CGPoint(x: 65, y: 14.55), controlPoint2: CGPoint(x: 50.45, y: 0))
                mask4.addCurve(to: CGPoint(x: 0, y: 32.5), controlPoint1: CGPoint(x: 14.55, y: 0), controlPoint2: CGPoint(x: 0, y: 14.55))
                mask4.addCurve(to: CGPoint(x: 32.5, y: 65), controlPoint1: CGPoint(x: 0, y: 50.45), controlPoint2: CGPoint(x: 14.55, y: 65))
                mask4.close()
                context.saveGState()
                mask4.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                mask4.fill()
                context.restoreGState()
                
                /// Mask (Outline Mask)
                context.saveGState()
                mask4.addClip()
                
                /// Plus
                // Warning: New symbols are not supported.
                
                context.restoreGState()
                // End Mask (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Header 2
        do {
            context.saveGState()
            context.translateBy(x: -8, y: -20)
            
            /// Rectangle
            let rectangle4 = UIBezierPath()
            rectangle4.move(to: CGPoint.zero)
            rectangle4.addLine(to: CGPoint(x: 391, y: 0))
            rectangle4.addLine(to: CGPoint(x: 391, y: 139))
            rectangle4.addLine(to: CGPoint(x: 0, y: 139))
            rectangle4.addLine(to: CGPoint.zero)
            rectangle4.close()
            context.saveGState()
            rectangle4.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle4.fill()
            rectangle4.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle4.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Filter Library")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 138.09, y: 96.25, width: 130, height: 75))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            context.restoreGState()
        }
        
        /// Rectangle Copy 2
        let rectangleCopy9 = UIBezierPath()
        rectangleCopy9.move(to: CGPoint.zero)
        rectangleCopy9.addLine(to: CGPoint(x: 375, y: 0))
        rectangleCopy9.addLine(to: CGPoint(x: 375, y: 693))
        rectangleCopy9.addLine(to: CGPoint(x: 0, y: 693))
        rectangleCopy9.addLine(to: CGPoint.zero)
        rectangleCopy9.close()
        context.saveGState()
        context.translateBy(x: 0, y: 230)
        // Warning: Blur effects are not supported.
        rectangleCopy9.usesEvenOddFillRule = true
        UIColor(white: 0.137, alpha: 0.78).setFill()
        rectangleCopy9.fill()
        context.restoreGState()
        
        /// BottomBar 2
        do {
            context.saveGState()
            context.translateBy(x: -15, y: 920)
            
            /// Rectangle
            let rectangle5 = UIBezierPath()
            rectangle5.move(to: CGPoint.zero)
            rectangle5.addLine(to: CGPoint(x: 399, y: 0))
            rectangle5.addLine(to: CGPoint(x: 399, y: 118))
            rectangle5.addLine(to: CGPoint(x: 0, y: 118))
            rectangle5.addLine(to: CGPoint.zero)
            rectangle5.close()
            context.saveGState()
            rectangle5.usesEvenOddFillRule = true
            UIColor(white: 0, alpha: 0.84).setFill()
            rectangle5.fill()
            rectangle5.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle5.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 45, y: 7)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy10 = UIBezierPath()
                rectangleCopy10.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy10.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy10.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy10.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy10.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy10.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy10.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy10.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy10.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy10.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy10.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangleCopy10.fill()
                rectangleCopy10.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangleCopy10.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle6 = UIBezierPath()
                rectangle6.move(to: CGPoint(x: 2, y: 0))
                rectangle6.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle6.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle6.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle6.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle6.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle6.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle6.addLine(to: CGPoint(x: 0, y: 2))
                rectangle6.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle6.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle6.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle6.fill()
                rectangle6.lineWidth = 2
                UIColor(white: 0.18, alpha: 1).setStroke()
                rectangle6.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Dropdown
        do {
            context.saveGState()
            context.translateBy(x: -8, y: 119)
            
            /// Rectangle Copy
            let rectangleCopy11 = UIBezierPath()
            rectangleCopy11.move(to: CGPoint.zero)
            rectangleCopy11.addLine(to: CGPoint(x: 401, y: 0))
            rectangleCopy11.addLine(to: CGPoint(x: 401, y: 121))
            rectangleCopy11.addLine(to: CGPoint(x: 0, y: 121))
            rectangleCopy11.addLine(to: CGPoint.zero)
            rectangleCopy11.close()
            context.saveGState()
            rectangleCopy11.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangleCopy11.fill()
            context.saveGState()
            rectangleCopy11.lineWidth = 2
            context.beginPath()
            context.addPath(rectangleCopy11.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.725, alpha: 1).setStroke()
            rectangleCopy11.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Landscape Copy
            // Warning: New symbols are not supported.
            
            /// Portrait Copy
            // Warning: New symbols are not supported.
            
            /// Cityscape Copy
            // Warning: New symbols are not supported.
            
            /// still-life Copy
            // Warning: New symbols are not supported.
            
            /// Nature Copy
            // Warning: New symbols are not supported.
            
            /// Tags
            let tags = NSMutableAttributedString(string: "Tags")
            tags.addAttribute(.font, value: UIFont(name: "Helvetica", size: 13)!, range: NSRange(location: 0, length: tags.length))
            tags.addAttribute(.kern, value: 0.16, range: NSRange(location: 0, length: tags.length))
            tags.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: tags.length))
            context.saveGState()
            tags.draw(at: CGPoint(x: 38, y: 13))
            context.restoreGState()
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 355, y: 96)
                context.rotate(by: CGFloat.pi)
                context.translateBy(x: -12, y: -12)
                
                /// Rectangle
                let rectangle7 = UIBezierPath()
                rectangle7.move(to: CGPoint(x: 5, y: 0))
                rectangle7.addLine(to: CGPoint(x: 19, y: 0))
                rectangle7.addCurve(to: CGPoint(x: 24, y: 5), controlPoint1: CGPoint(x: 21.76, y: 0), controlPoint2: CGPoint(x: 24, y: 2.24))
                rectangle7.addLine(to: CGPoint(x: 24, y: 19))
                rectangle7.addCurve(to: CGPoint(x: 19, y: 24), controlPoint1: CGPoint(x: 24, y: 21.76), controlPoint2: CGPoint(x: 21.76, y: 24))
                rectangle7.addLine(to: CGPoint(x: 5, y: 24))
                rectangle7.addCurve(to: CGPoint(x: 0, y: 19), controlPoint1: CGPoint(x: 2.24, y: 24), controlPoint2: CGPoint(x: 0, y: 21.76))
                rectangle7.addLine(to: CGPoint(x: 0, y: 5))
                rectangle7.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                rectangle7.close()
                context.saveGState()
                rectangle7.usesEvenOddFillRule = true
                UIColor.white.setFill()
                rectangle7.fill()
                context.restoreGState()
                
                /// New shape
                let newShape = UIBezierPath()
                newShape.move(to: CGPoint(x: 1.44, y: 0))
                newShape.addLine(to: CGPoint(x: 7.68, y: 3.84))
                newShape.addLine(to: CGPoint(x: 13.92, y: 0))
                newShape.addLine(to: CGPoint(x: 15.36, y: 2.4))
                newShape.addLine(to: CGPoint(x: 7.68, y: 7.2))
                newShape.addLine(to: CGPoint(x: 0, y: 2.4))
                newShape.addLine(to: CGPoint(x: 1.44, y: 0))
                newShape.close()
                context.saveGState()
                context.translateBy(x: 4.8, y: 8.12)
                newShape.usesEvenOddFillRule = true
                UIColor.black.setFill()
                newShape.fill()
                newShape.lineWidth = 1
                UIColor.black.setStroke()
                newShape.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRoll2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// IMG_3767
        // Warning: Image layers are not supported.
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 124, y: 0))
        rectangle.addLine(to: CGPoint(x: 124, y: 124))
        rectangle.addLine(to: CGPoint(x: 0, y: 124))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 0, y: 135)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 0.01).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor.white.setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawRoll(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// IMG_3765
        // Warning: Image layers are not supported.
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 124, y: 0))
        rectangle.addLine(to: CGPoint(x: 124, y: 124))
        rectangle.addLine(to: CGPoint(x: 0, y: 124))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 126, y: 135)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 0.01).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor.white.setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCamera(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle Copy
        let rectangleCopy = UIBezierPath()
        rectangleCopy.move(to: CGPoint.zero)
        rectangleCopy.addLine(to: CGPoint(x: 414, y: 0))
        rectangleCopy.addLine(to: CGPoint(x: 414, y: 896))
        rectangleCopy.addLine(to: CGPoint(x: 0, y: 896))
        rectangleCopy.addLine(to: CGPoint.zero)
        rectangleCopy.close()
        context.saveGState()
        rectangleCopy.usesEvenOddFillRule = true
        UIColor.black.setFill()
        rectangleCopy.fill()
        context.saveGState()
        rectangleCopy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangleCopy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangleCopy.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint.zero)
        path.addLine(to: CGPoint(x: 14, y: 14))
        path.addLine(to: CGPoint(x: 28, y: 0))
        context.saveGState()
        context.translateBy(x: 28, y: 46)
        path.lineWidth = 2
        UIColor.white.setStroke()
        path.stroke()
        context.restoreGState()
        
        /// Camera
        do {
            context.saveGState()
            context.translateBy(x: 152, y: 683)
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 36, y: 72))
            oval.addCurve(to: CGPoint(x: 72, y: 36), controlPoint1: CGPoint(x: 55.88, y: 72), controlPoint2: CGPoint(x: 72, y: 55.88))
            oval.addCurve(to: CGPoint(x: 36, y: 0), controlPoint1: CGPoint(x: 72, y: 16.12), controlPoint2: CGPoint(x: 55.88, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 36), controlPoint1: CGPoint(x: 16.12, y: 0), controlPoint2: CGPoint(x: 0, y: 16.12))
            oval.addCurve(to: CGPoint(x: 36, y: 72), controlPoint1: CGPoint(x: 0, y: 55.88), controlPoint2: CGPoint(x: 16.12, y: 72))
            oval.close()
            context.saveGState()
            oval.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval.fill()
            context.restoreGState()
            
            /// Oval
            let oval2 = UIBezierPath()
            oval2.move(to: CGPoint(x: 33, y: 66))
            oval2.addCurve(to: CGPoint(x: 66, y: 33), controlPoint1: CGPoint(x: 51.23, y: 66), controlPoint2: CGPoint(x: 66, y: 51.23))
            oval2.addCurve(to: CGPoint(x: 33, y: 0), controlPoint1: CGPoint(x: 66, y: 14.77), controlPoint2: CGPoint(x: 51.23, y: 0))
            oval2.addCurve(to: CGPoint(x: 0, y: 33), controlPoint1: CGPoint(x: 14.77, y: 0), controlPoint2: CGPoint(x: 0, y: 14.77))
            oval2.addCurve(to: CGPoint(x: 33, y: 66), controlPoint1: CGPoint(x: 0, y: 51.23), controlPoint2: CGPoint(x: 14.77, y: 66))
            oval2.close()
            context.saveGState()
            context.translateBy(x: 3, y: 3)
            oval2.usesEvenOddFillRule = true
            UIColor.black.setFill()
            oval2.fill()
            context.restoreGState()
            
            /// Oval
            let oval3 = UIBezierPath()
            oval3.move(to: CGPoint(x: 30, y: 60))
            oval3.addCurve(to: CGPoint(x: 60, y: 30), controlPoint1: CGPoint(x: 46.57, y: 60), controlPoint2: CGPoint(x: 60, y: 46.57))
            oval3.addCurve(to: CGPoint(x: 30, y: 0), controlPoint1: CGPoint(x: 60, y: 13.43), controlPoint2: CGPoint(x: 46.57, y: 0))
            oval3.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 13.43, y: 0), controlPoint2: CGPoint(x: 0, y: 13.43))
            oval3.addCurve(to: CGPoint(x: 30, y: 60), controlPoint1: CGPoint(x: 0, y: 46.57), controlPoint2: CGPoint(x: 13.43, y: 60))
            oval3.close()
            context.saveGState()
            context.translateBy(x: 6, y: 6)
            oval3.usesEvenOddFillRule = true
            UIColor.white.setFill()
            oval3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Photo
        let photo = NSMutableAttributedString(string: "Photo")
        photo.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 0, length: photo.length))
        photo.addAttribute(.kern, value: 0.18, range: NSRange(location: 0, length: photo.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            photo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: photo.length))
        }
        photo.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: photo.length))
        context.saveGState()
        photo.draw(in: CGRect(x: 167, y: 778, width: 47, height: 13))
        context.restoreGState()
        
        /// Portrait
        let portrait = NSMutableAttributedString(string: "Portrait")
        portrait.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 14)!, range: NSRange(location: 0, length: portrait.length))
        portrait.addAttribute(.kern, value: 0.18, range: NSRange(location: 0, length: portrait.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            portrait.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: portrait.length))
        }
        portrait.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: portrait.length))
        context.saveGState()
        portrait.draw(in: CGRect(x: 250, y: 778, width: 68, height: 13))
        context.restoreGState()
        
        /// Square
        let square = NSMutableAttributedString(string: "Square")
        square.addAttribute(.font, value: UIFont(name: "Helvetica-Light", size: 14)!, range: NSRange(location: 0, length: square.length))
        square.addAttribute(.kern, value: 0.18, range: NSRange(location: 0, length: square.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.maximumLineHeight = 11
            paragraphStyle.minimumLineHeight = 11
            square.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: square.length))
        }
        square.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: square.length))
        context.saveGState()
        square.draw(in: CGRect(x: 318, y: 778, width: 68, height: 13))
        context.restoreGState()
        
        /// Oval
        let oval4 = UIBezierPath()
        oval4.move(to: CGPoint(x: 4, y: 8))
        oval4.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
        oval4.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
        oval4.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
        oval4.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
        oval4.close()
        context.saveGState()
        context.translateBy(x: 184, y: 798)
        oval4.usesEvenOddFillRule = true
        UIColor.white.setFill()
        oval4.fill()
        context.restoreGState()
        
        /// icons8_synchronize_24px
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawGallery(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 1304), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 1304), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 1304)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Background
        let background = UIBezierPath()
        background.move(to: CGPoint.zero)
        background.addLine(to: CGPoint(x: 490, y: 0))
        background.addLine(to: CGPoint(x: 490, y: 1325))
        background.addLine(to: CGPoint(x: 0, y: 1325))
        background.addLine(to: CGPoint.zero)
        background.close()
        context.saveGState()
        context.translateBy(x: -57, y: -0)
        background.usesEvenOddFillRule = true
        UIColor.black.setFill()
        background.fill()
        context.restoreGState()
        
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: -7, y: -23)
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint.zero)
            rectangle.addLine(to: CGPoint(x: 391, y: 0))
            rectangle.addLine(to: CGPoint(x: 391, y: 139))
            rectangle.addLine(to: CGPoint(x: 0, y: 139))
            rectangle.addLine(to: CGPoint.zero)
            rectangle.close()
            context.saveGState()
            rectangle.usesEvenOddFillRule = true
            UIColor.black.setFill()
            rectangle.fill()
            rectangle.lineWidth = 1
            UIColor(white: 0.847, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            
            /// Camera
            // Warning: New symbols are not supported.
            
            /// Plus
            // Warning: New symbols are not supported.
            
            /// Gallery
            let gallery2 = NSMutableAttributedString(string: "Gallery")
            gallery2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: gallery2.length))
            gallery2.addAttribute(.kern, value: 1.07, range: NSRange(location: 0, length: gallery2.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 34
                paragraphStyle.minimumLineHeight = 34
                gallery2.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: gallery2.length))
            }
            gallery2.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: gallery2.length))
            context.saveGState()
            gallery2.draw(in: CGRect(x: 167, y: 96.25, width: 62.09, height: 38))
            context.restoreGState()
            
            /// Top Bar instance
            // Warning: New symbols are not supported.
            
            /// Device Bezels/iPhoneXS - Display Shape
            do {
                context.saveGState()
                context.translateBy(x: 6, y: 18.97)
                
                /// For Reference - Display Shape
                // Warning: Image layers are not supported.
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Images
        do {
            context.saveGState()
            context.translateBy(x: 14, y: 147)
            
            /// Image4
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 816)
                
                /// Image
                do {
                    context.saveGState()
                    
                    /// Mask 2
                    let mask2 = UIBezierPath()
                    mask2.move(to: CGPoint(x: 20, y: 0))
                    mask2.addLine(to: CGPoint(x: 322.28, y: 0))
                    mask2.addCurve(to: CGPoint(x: 342.28, y: 20), controlPoint1: CGPoint(x: 333.33, y: 0), controlPoint2: CGPoint(x: 342.28, y: 8.95))
                    mask2.addLine(to: CGPoint(x: 342.28, y: 188))
                    mask2.addCurve(to: CGPoint(x: 322.28, y: 208), controlPoint1: CGPoint(x: 342.28, y: 199.05), controlPoint2: CGPoint(x: 333.33, y: 208))
                    mask2.addLine(to: CGPoint(x: 20, y: 208))
                    mask2.addCurve(to: CGPoint(x: 0, y: 188), controlPoint1: CGPoint(x: 8.95, y: 208), controlPoint2: CGPoint(x: 0, y: 199.05))
                    mask2.addLine(to: CGPoint(x: 0, y: 20))
                    mask2.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    mask2.close()
                    context.saveGState()
                    mask2.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(mask2.cgPath)
                    context.addRect(mask2.bounds.insetBy(dx: 145, dy: 139))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -18.28, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.28, y: 6)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 35 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.945, alpha: 1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        mask2.fill()
                        context.saveGState()
                        mask2.lineWidth = -36
                        UIColor.black.setStroke()
                        mask2.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    mask2.usesEvenOddFillRule = true
                    UIColor(white: 0.945, alpha: 1).setFill()
                    mask2.fill()
                    context.restoreGState()
                    
                    /// Mask 2 (Outline Mask)
                    context.saveGState()
                    mask2.addClip()
                    
                    /// MainImage
                    do {
                        context.saveGState()
                        context.translateBy(x: 0, y: -14)
                        
                        /// Mask
                        let mask = UIBezierPath()
                        mask.move(to: CGPoint.zero)
                        mask.addLine(to: CGPoint(x: 342.28, y: 0))
                        mask.addLine(to: CGPoint(x: 342.28, y: 237.55))
                        mask.addLine(to: CGPoint(x: 0, y: 237.55))
                        mask.addLine(to: CGPoint.zero)
                        mask.close()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask.addClip()
                        
                        /// d35230928389adc3dc064b80503d08d1
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    /// Rectangle
                    let rectangle3 = UIBezierPath()
                    rectangle3.move(to: CGPoint(x: 20, y: 0))
                    rectangle3.addLine(to: CGPoint(x: 142, y: 0))
                    rectangle3.addCurve(to: CGPoint(x: 162, y: 20), controlPoint1: CGPoint(x: 153.05, y: 0), controlPoint2: CGPoint(x: 162, y: 8.95))
                    rectangle3.addLine(to: CGPoint(x: 162, y: 53))
                    rectangle3.addCurve(to: CGPoint(x: 142, y: 73), controlPoint1: CGPoint(x: 162, y: 64.05), controlPoint2: CGPoint(x: 153.05, y: 73))
                    rectangle3.addLine(to: CGPoint(x: 20, y: 73))
                    rectangle3.addCurve(to: CGPoint(x: 0, y: 53), controlPoint1: CGPoint(x: 8.95, y: 73), controlPoint2: CGPoint(x: 0, y: 64.05))
                    rectangle3.addLine(to: CGPoint(x: 0, y: 20))
                    rectangle3.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangle3.close()
                    context.saveGState()
                    context.translateBy(x: 206.28, y: 155)
                    rectangle3.usesEvenOddFillRule = true
                    UIColor(white: 1, alpha: 0.47).setFill()
                    rectangle3.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Mask 2 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Feburary 28th, 2020
                let feburary28th2020 = NSMutableAttributedString(string: "Feburary 25th, 2020")
                feburary28th2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 11))
                feburary28th2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 11, length: 4))
                feburary28th2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 15, length: 4))
                feburary28th2020.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: feburary28th2020.length))
                feburary28th2020.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: feburary28th2020.length))
                context.saveGState()
                feburary28th2020.draw(in: CGRect(x: 119.28, y: 228, width: 112, height: 16))
                context.restoreGState()
                
                /// Original
                do {
                    context.saveGState()
                    context.translateBy(x: 223.28, y: 164)
                    
                    /// Rectangle
                    let rectangle4 = UIBezierPath()
                    rectangle4.move(to: CGPoint.zero)
                    rectangle4.addLine(to: CGPoint(x: 35, y: 0))
                    rectangle4.addLine(to: CGPoint(x: 35, y: 35))
                    rectangle4.addLine(to: CGPoint(x: 0, y: 35))
                    rectangle4.addLine(to: CGPoint.zero)
                    rectangle4.close()
                    context.saveGState()
                    rectangle4.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangle4.fill()
                    context.restoreGState()
                    
                    /// Rectangle (Outline Mask)
                    context.saveGState()
                    rectangle4.addClip()
                    
                    /// 171117103242-galaxy-soho-china
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Small Style
                do {
                    context.saveGState()
                    context.translateBy(x: 287.28, y: 164)
                    
                    /// Rectangle Copy
                    let rectangleCopy = UIBezierPath()
                    rectangleCopy.move(to: CGPoint.zero)
                    rectangleCopy.addLine(to: CGPoint(x: 35, y: 0))
                    rectangleCopy.addLine(to: CGPoint(x: 35, y: 35))
                    rectangleCopy.addLine(to: CGPoint(x: 0, y: 35))
                    rectangleCopy.addLine(to: CGPoint.zero)
                    rectangleCopy.close()
                    context.saveGState()
                    rectangleCopy.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangleCopy.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy (Outline Mask)
                    context.saveGState()
                    rectangleCopy.addClip()
                    
                    /// screen-shot-2018-06-12-at-2-57-01-pm
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle Copy (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Plus instance
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Image3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 548)
                
                /// Image
                do {
                    context.saveGState()
                    
                    /// Mask 2
                    let mask3 = UIBezierPath()
                    mask3.move(to: CGPoint(x: 20, y: 0))
                    mask3.addLine(to: CGPoint(x: 322.28, y: 0))
                    mask3.addCurve(to: CGPoint(x: 342.28, y: 20), controlPoint1: CGPoint(x: 333.33, y: 0), controlPoint2: CGPoint(x: 342.28, y: 8.95))
                    mask3.addLine(to: CGPoint(x: 342.28, y: 188))
                    mask3.addCurve(to: CGPoint(x: 322.28, y: 208), controlPoint1: CGPoint(x: 342.28, y: 199.05), controlPoint2: CGPoint(x: 333.33, y: 208))
                    mask3.addLine(to: CGPoint(x: 20, y: 208))
                    mask3.addCurve(to: CGPoint(x: 0, y: 188), controlPoint1: CGPoint(x: 8.95, y: 208), controlPoint2: CGPoint(x: 0, y: 199.05))
                    mask3.addLine(to: CGPoint(x: 0, y: 20))
                    mask3.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    mask3.close()
                    context.saveGState()
                    mask3.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(mask3.cgPath)
                    context.addRect(mask3.bounds.insetBy(dx: 145, dy: 139))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -18.28, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.28, y: 6)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 35 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.945, alpha: 1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        mask3.fill()
                        context.saveGState()
                        mask3.lineWidth = -36
                        UIColor.black.setStroke()
                        mask3.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    mask3.usesEvenOddFillRule = true
                    UIColor(white: 0.945, alpha: 1).setFill()
                    mask3.fill()
                    context.restoreGState()
                    
                    /// Mask 2 (Outline Mask)
                    context.saveGState()
                    mask3.addClip()
                    
                    /// MainImage
                    do {
                        context.saveGState()
                        context.translateBy(x: 0, y: -14)
                        
                        /// Mask
                        let mask4 = UIBezierPath()
                        mask4.move(to: CGPoint.zero)
                        mask4.addLine(to: CGPoint(x: 342.28, y: 0))
                        mask4.addLine(to: CGPoint(x: 342.28, y: 237.55))
                        mask4.addLine(to: CGPoint(x: 0, y: 237.55))
                        mask4.addLine(to: CGPoint.zero)
                        mask4.close()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask4.addClip()
                        
                        /// d35230928389adc3dc064b80503d08d1
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    /// Rectangle
                    let rectangle5 = UIBezierPath()
                    rectangle5.move(to: CGPoint(x: 20, y: 0))
                    rectangle5.addLine(to: CGPoint(x: 142, y: 0))
                    rectangle5.addCurve(to: CGPoint(x: 162, y: 20), controlPoint1: CGPoint(x: 153.05, y: 0), controlPoint2: CGPoint(x: 162, y: 8.95))
                    rectangle5.addLine(to: CGPoint(x: 162, y: 53))
                    rectangle5.addCurve(to: CGPoint(x: 142, y: 73), controlPoint1: CGPoint(x: 162, y: 64.05), controlPoint2: CGPoint(x: 153.05, y: 73))
                    rectangle5.addLine(to: CGPoint(x: 20, y: 73))
                    rectangle5.addCurve(to: CGPoint(x: 0, y: 53), controlPoint1: CGPoint(x: 8.95, y: 73), controlPoint2: CGPoint(x: 0, y: 64.05))
                    rectangle5.addLine(to: CGPoint(x: 0, y: 20))
                    rectangle5.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangle5.close()
                    context.saveGState()
                    context.translateBy(x: 206.28, y: 155)
                    rectangle5.usesEvenOddFillRule = true
                    UIColor(white: 1, alpha: 0.47).setFill()
                    rectangle5.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Mask 2 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Feburary 28th, 2020
                let feburary28th2 = NSMutableAttributedString(string: "Feburary 28th, 2020")
                feburary28th2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 11))
                feburary28th2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 11, length: 4))
                feburary28th2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 15, length: 4))
                feburary28th2.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: feburary28th2.length))
                feburary28th2.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: feburary28th2.length))
                context.saveGState()
                feburary28th2.draw(in: CGRect(x: 119.28, y: 228, width: 115, height: 16))
                context.restoreGState()
                
                /// Original
                do {
                    context.saveGState()
                    context.translateBy(x: 223.28, y: 164)
                    
                    /// Rectangle
                    let rectangle6 = UIBezierPath()
                    rectangle6.move(to: CGPoint.zero)
                    rectangle6.addLine(to: CGPoint(x: 35, y: 0))
                    rectangle6.addLine(to: CGPoint(x: 35, y: 35))
                    rectangle6.addLine(to: CGPoint(x: 0, y: 35))
                    rectangle6.addLine(to: CGPoint.zero)
                    rectangle6.close()
                    context.saveGState()
                    rectangle6.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangle6.fill()
                    context.restoreGState()
                    
                    /// Rectangle (Outline Mask)
                    context.saveGState()
                    rectangle6.addClip()
                    
                    /// 171117103242-galaxy-soho-china
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Small Style
                do {
                    context.saveGState()
                    context.translateBy(x: 287.28, y: 164)
                    
                    /// Rectangle Copy
                    let rectangleCopy9 = UIBezierPath()
                    rectangleCopy9.move(to: CGPoint.zero)
                    rectangleCopy9.addLine(to: CGPoint(x: 35, y: 0))
                    rectangleCopy9.addLine(to: CGPoint(x: 35, y: 35))
                    rectangleCopy9.addLine(to: CGPoint(x: 0, y: 35))
                    rectangleCopy9.addLine(to: CGPoint.zero)
                    rectangleCopy9.close()
                    context.saveGState()
                    rectangleCopy9.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangleCopy9.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy (Outline Mask)
                    context.saveGState()
                    rectangleCopy9.addClip()
                    
                    /// screen-shot-2018-06-12-at-2-57-01-pm
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle Copy (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Plus instance
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Image2
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 274)
                
                /// Image
                do {
                    context.saveGState()
                    
                    /// Mask 2
                    let mask5 = UIBezierPath()
                    mask5.move(to: CGPoint(x: 20, y: 0))
                    mask5.addLine(to: CGPoint(x: 322.28, y: 0))
                    mask5.addCurve(to: CGPoint(x: 342.28, y: 20), controlPoint1: CGPoint(x: 333.33, y: 0), controlPoint2: CGPoint(x: 342.28, y: 8.95))
                    mask5.addLine(to: CGPoint(x: 342.28, y: 188))
                    mask5.addCurve(to: CGPoint(x: 322.28, y: 208), controlPoint1: CGPoint(x: 342.28, y: 199.05), controlPoint2: CGPoint(x: 333.33, y: 208))
                    mask5.addLine(to: CGPoint(x: 20, y: 208))
                    mask5.addCurve(to: CGPoint(x: 0, y: 188), controlPoint1: CGPoint(x: 8.95, y: 208), controlPoint2: CGPoint(x: 0, y: 199.05))
                    mask5.addLine(to: CGPoint(x: 0, y: 20))
                    mask5.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    mask5.close()
                    context.saveGState()
                    mask5.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(mask5.cgPath)
                    context.addRect(mask5.bounds.insetBy(dx: 145, dy: 139))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -18.28, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.28, y: 6)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 35 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.945, alpha: 1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        mask5.fill()
                        context.saveGState()
                        mask5.lineWidth = -36
                        UIColor.black.setStroke()
                        mask5.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    mask5.usesEvenOddFillRule = true
                    UIColor(white: 0.945, alpha: 1).setFill()
                    mask5.fill()
                    context.restoreGState()
                    
                    /// Mask 2 (Outline Mask)
                    context.saveGState()
                    mask5.addClip()
                    
                    /// MainImage
                    do {
                        context.saveGState()
                        context.translateBy(x: 0, y: -14)
                        
                        /// Mask
                        let mask6 = UIBezierPath()
                        mask6.move(to: CGPoint.zero)
                        mask6.addLine(to: CGPoint(x: 342.28, y: 0))
                        mask6.addLine(to: CGPoint(x: 342.28, y: 237.55))
                        mask6.addLine(to: CGPoint(x: 0, y: 237.55))
                        mask6.addLine(to: CGPoint.zero)
                        mask6.close()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask6.addClip()
                        
                        /// d35230928389adc3dc064b80503d08d1
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    /// Rectangle
                    let rectangle7 = UIBezierPath()
                    rectangle7.move(to: CGPoint(x: 20, y: 0))
                    rectangle7.addLine(to: CGPoint(x: 142, y: 0))
                    rectangle7.addCurve(to: CGPoint(x: 162, y: 20), controlPoint1: CGPoint(x: 153.05, y: 0), controlPoint2: CGPoint(x: 162, y: 8.95))
                    rectangle7.addLine(to: CGPoint(x: 162, y: 53))
                    rectangle7.addCurve(to: CGPoint(x: 142, y: 73), controlPoint1: CGPoint(x: 162, y: 64.05), controlPoint2: CGPoint(x: 153.05, y: 73))
                    rectangle7.addLine(to: CGPoint(x: 20, y: 73))
                    rectangle7.addCurve(to: CGPoint(x: 0, y: 53), controlPoint1: CGPoint(x: 8.95, y: 73), controlPoint2: CGPoint(x: 0, y: 64.05))
                    rectangle7.addLine(to: CGPoint(x: 0, y: 20))
                    rectangle7.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangle7.close()
                    context.saveGState()
                    context.translateBy(x: 206.28, y: 155)
                    rectangle7.usesEvenOddFillRule = true
                    UIColor(white: 1, alpha: 0.47).setFill()
                    rectangle7.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Mask 2 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Feburary 28th, 2020
                let feburary28th3 = NSMutableAttributedString(string: "Feburary 28th, 2020")
                feburary28th3.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 11))
                feburary28th3.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 11, length: 4))
                feburary28th3.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 15, length: 4))
                feburary28th3.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: feburary28th3.length))
                feburary28th3.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: feburary28th3.length))
                context.saveGState()
                feburary28th3.draw(in: CGRect(x: 112, y: 228, width: 119, height: 16))
                context.restoreGState()
                
                /// Original
                do {
                    context.saveGState()
                    context.translateBy(x: 223.28, y: 164)
                    
                    /// Rectangle
                    let rectangle8 = UIBezierPath()
                    rectangle8.move(to: CGPoint.zero)
                    rectangle8.addLine(to: CGPoint(x: 35, y: 0))
                    rectangle8.addLine(to: CGPoint(x: 35, y: 35))
                    rectangle8.addLine(to: CGPoint(x: 0, y: 35))
                    rectangle8.addLine(to: CGPoint.zero)
                    rectangle8.close()
                    context.saveGState()
                    rectangle8.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangle8.fill()
                    context.restoreGState()
                    
                    /// Rectangle (Outline Mask)
                    context.saveGState()
                    rectangle8.addClip()
                    
                    /// 171117103242-galaxy-soho-china
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Small Style
                do {
                    context.saveGState()
                    context.translateBy(x: 287.28, y: 164)
                    
                    /// Rectangle Copy
                    let rectangleCopy10 = UIBezierPath()
                    rectangleCopy10.move(to: CGPoint.zero)
                    rectangleCopy10.addLine(to: CGPoint(x: 35, y: 0))
                    rectangleCopy10.addLine(to: CGPoint(x: 35, y: 35))
                    rectangleCopy10.addLine(to: CGPoint(x: 0, y: 35))
                    rectangleCopy10.addLine(to: CGPoint.zero)
                    rectangleCopy10.close()
                    context.saveGState()
                    rectangleCopy10.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangleCopy10.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy (Outline Mask)
                    context.saveGState()
                    rectangleCopy10.addClip()
                    
                    /// screen-shot-2018-06-12-at-2-57-01-pm
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle Copy (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Plus instance
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            /// Image1
            do {
                context.saveGState()
                context.translateBy(x: 3.72, y: 0)
                
                /// Image
                do {
                    context.saveGState()
                    
                    /// Mask 2
                    let mask7 = UIBezierPath()
                    mask7.move(to: CGPoint(x: 20, y: 0))
                    mask7.addLine(to: CGPoint(x: 322.28, y: 0))
                    mask7.addCurve(to: CGPoint(x: 342.28, y: 20), controlPoint1: CGPoint(x: 333.33, y: 0), controlPoint2: CGPoint(x: 342.28, y: 8.95))
                    mask7.addLine(to: CGPoint(x: 342.28, y: 188))
                    mask7.addCurve(to: CGPoint(x: 322.28, y: 208), controlPoint1: CGPoint(x: 342.28, y: 199.05), controlPoint2: CGPoint(x: 333.33, y: 208))
                    mask7.addLine(to: CGPoint(x: 20, y: 208))
                    mask7.addCurve(to: CGPoint(x: 0, y: 188), controlPoint1: CGPoint(x: 8.95, y: 208), controlPoint2: CGPoint(x: 0, y: 199.05))
                    mask7.addLine(to: CGPoint(x: 0, y: 20))
                    mask7.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    mask7.close()
                    context.saveGState()
                    mask7.usesEvenOddFillRule = true
                    context.saveGState()
                    context.beginPath()
                    context.addPath(mask7.cgPath)
                    context.addRect(mask7.bounds.insetBy(dx: 145, dy: 139))
                    context.clip(using: .evenOdd)
                    context.translateBy(x: -18.28, y: 0)
                    do {
                        let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                        let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                        let baseOffset = context.convertToDeviceSpace(CGPoint(x: 18.28, y: 6)).applying(baseTransform)
                        let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                        let shadowBlur: CGFloat = 35 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                        context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0.945, alpha: 1).cgColor)
                    }
                    context.beginTransparencyLayer(auxiliaryInfo: nil)
                    do {
                        UIColor.black.setFill()
                        mask7.fill()
                        context.saveGState()
                        mask7.lineWidth = -36
                        UIColor.black.setStroke()
                        mask7.stroke()
                        context.restoreGState()
                    }
                    context.endTransparencyLayer()
                    context.restoreGState()
                    mask7.usesEvenOddFillRule = true
                    UIColor(white: 0.945, alpha: 1).setFill()
                    mask7.fill()
                    context.restoreGState()
                    
                    /// Mask 2 (Outline Mask)
                    context.saveGState()
                    mask7.addClip()
                    
                    /// MainImage
                    do {
                        context.saveGState()
                        context.translateBy(x: 0, y: -14)
                        
                        /// Mask
                        let mask8 = UIBezierPath()
                        mask8.move(to: CGPoint.zero)
                        mask8.addLine(to: CGPoint(x: 342.28, y: 0))
                        mask8.addLine(to: CGPoint(x: 342.28, y: 237.55))
                        mask8.addLine(to: CGPoint(x: 0, y: 237.55))
                        mask8.addLine(to: CGPoint.zero)
                        mask8.close()
                        
                        /// Mask (Outline Mask)
                        context.saveGState()
                        mask8.addClip()
                        
                        /// d35230928389adc3dc064b80503d08d1
                        // Warning: Image layers are not supported.
                        
                        context.restoreGState()
                        // End Mask (Outline Mask)
                        
                        context.restoreGState()
                    }
                    
                    /// Rectangle
                    let rectangle9 = UIBezierPath()
                    rectangle9.move(to: CGPoint(x: 20, y: 0))
                    rectangle9.addLine(to: CGPoint(x: 142, y: 0))
                    rectangle9.addCurve(to: CGPoint(x: 162, y: 20), controlPoint1: CGPoint(x: 153.05, y: 0), controlPoint2: CGPoint(x: 162, y: 8.95))
                    rectangle9.addLine(to: CGPoint(x: 162, y: 53))
                    rectangle9.addCurve(to: CGPoint(x: 142, y: 73), controlPoint1: CGPoint(x: 162, y: 64.05), controlPoint2: CGPoint(x: 153.05, y: 73))
                    rectangle9.addLine(to: CGPoint(x: 20, y: 73))
                    rectangle9.addCurve(to: CGPoint(x: 0, y: 53), controlPoint1: CGPoint(x: 8.95, y: 73), controlPoint2: CGPoint(x: 0, y: 64.05))
                    rectangle9.addLine(to: CGPoint(x: 0, y: 20))
                    rectangle9.addCurve(to: CGPoint(x: 20, y: 0), controlPoint1: CGPoint(x: 0, y: 8.95), controlPoint2: CGPoint(x: 8.95, y: 0))
                    rectangle9.close()
                    context.saveGState()
                    context.translateBy(x: 206.28, y: 155)
                    rectangle9.usesEvenOddFillRule = true
                    UIColor(white: 1, alpha: 0.47).setFill()
                    rectangle9.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                    // End Mask 2 (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// March 1st, 2020
                let march1st2020 = NSMutableAttributedString(string: "March 1st, 2020")
                march1st2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 7))
                march1st2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 9)!, range: NSRange(location: 7, length: 4))
                march1st2020.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 11, length: 4))
                march1st2020.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: march1st2020.length))
                march1st2020.addAttribute(.foregroundColor, value: UIColor(white: 0.725, alpha: 1), range: NSRange(location: 0, length: march1st2020.length))
                context.saveGState()
                march1st2020.draw(in: CGRect(x: 119.28, y: 228, width: 104, height: 16))
                context.restoreGState()
                
                /// Original
                do {
                    context.saveGState()
                    context.translateBy(x: 223.28, y: 164)
                    
                    /// Rectangle
                    let rectangle10 = UIBezierPath()
                    rectangle10.move(to: CGPoint.zero)
                    rectangle10.addLine(to: CGPoint(x: 35, y: 0))
                    rectangle10.addLine(to: CGPoint(x: 35, y: 35))
                    rectangle10.addLine(to: CGPoint(x: 0, y: 35))
                    rectangle10.addLine(to: CGPoint.zero)
                    rectangle10.close()
                    context.saveGState()
                    rectangle10.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangle10.fill()
                    context.restoreGState()
                    
                    /// Rectangle (Outline Mask)
                    context.saveGState()
                    rectangle10.addClip()
                    
                    /// 171117103242-galaxy-soho-china
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Small Style
                do {
                    context.saveGState()
                    context.translateBy(x: 287.28, y: 164)
                    
                    /// Rectangle Copy
                    let rectangleCopy11 = UIBezierPath()
                    rectangleCopy11.move(to: CGPoint.zero)
                    rectangleCopy11.addLine(to: CGPoint(x: 35, y: 0))
                    rectangleCopy11.addLine(to: CGPoint(x: 35, y: 35))
                    rectangleCopy11.addLine(to: CGPoint(x: 0, y: 35))
                    rectangleCopy11.addLine(to: CGPoint.zero)
                    rectangleCopy11.close()
                    context.saveGState()
                    rectangleCopy11.usesEvenOddFillRule = true
                    UIColor(white: 0.827, alpha: 1).setFill()
                    rectangleCopy11.fill()
                    context.restoreGState()
                    
                    /// Rectangle Copy (Outline Mask)
                    context.saveGState()
                    rectangleCopy11.addClip()
                    
                    /// screen-shot-2018-06-12-at-2-57-01-pm
                    // Warning: Image layers are not supported.
                    
                    context.restoreGState()
                    // End Rectangle Copy (Outline Mask)
                    
                    context.restoreGState()
                }
                
                /// Plus instance
                // Warning: New symbols are not supported.
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// BottomBar
        do {
            context.saveGState()
            context.translateBy(x: -11, y: 1217)
            
            /// Rectangle
            let rectangle11 = UIBezierPath()
            rectangle11.move(to: CGPoint.zero)
            rectangle11.addLine(to: CGPoint(x: 399, y: 0))
            rectangle11.addLine(to: CGPoint(x: 399, y: 118))
            rectangle11.addLine(to: CGPoint(x: 0, y: 118))
            rectangle11.addLine(to: CGPoint.zero)
            rectangle11.close()
            context.saveGState()
            rectangle11.usesEvenOddFillRule = true
            UIColor(white: 0, alpha: 0.84).setFill()
            rectangle11.fill()
            rectangle11.lineWidth = 1
            UIColor(white: 0.243, alpha: 1).setStroke()
            rectangle11.stroke()
            context.restoreGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 8, y: 0))
            rectangle2.addLine(to: CGPoint(x: 57, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 65, y: 8), controlPoint1: CGPoint(x: 61.42, y: 0), controlPoint2: CGPoint(x: 65, y: 3.58))
            rectangle2.addLine(to: CGPoint(x: 65, y: 30))
            rectangle2.addCurve(to: CGPoint(x: 57, y: 38), controlPoint1: CGPoint(x: 65, y: 34.42), controlPoint2: CGPoint(x: 61.42, y: 38))
            rectangle2.addLine(to: CGPoint(x: 8, y: 38))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 30), controlPoint1: CGPoint(x: 3.58, y: 38), controlPoint2: CGPoint(x: 0, y: 34.42))
            rectangle2.addLine(to: CGPoint(x: 0, y: 8))
            rectangle2.addCurve(to: CGPoint(x: 8, y: 0), controlPoint1: CGPoint(x: 0, y: 3.58), controlPoint2: CGPoint(x: 3.58, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 169, y: 5)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// PicassoX_Logo_Final-01
            // Warning: Image layers are not supported.
            
            /// Fillter Library
            do {
                context.saveGState()
                context.translateBy(x: 66, y: 15.55)
                
                /// Rectangle Copy
                let rectangleCopy12 = UIBezierPath()
                rectangleCopy12.move(to: CGPoint(x: 2, y: 0))
                rectangleCopy12.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangleCopy12.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangleCopy12.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangleCopy12.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangleCopy12.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangleCopy12.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangleCopy12.addLine(to: CGPoint(x: 0, y: 2))
                rectangleCopy12.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangleCopy12.close()
                context.saveGState()
                context.translateBy(x: 4.82, y: 4.82)
                rectangleCopy12.usesEvenOddFillRule = true
                UIColor.black.setFill()
                rectangleCopy12.fill()
                rectangleCopy12.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                rectangleCopy12.stroke()
                context.restoreGState()
                
                /// Rectangle
                let rectangle12 = UIBezierPath()
                rectangle12.move(to: CGPoint(x: 2, y: 0))
                rectangle12.addLine(to: CGPoint(x: 14.86, y: 0))
                rectangle12.addCurve(to: CGPoint(x: 16.86, y: 2), controlPoint1: CGPoint(x: 15.97, y: 0), controlPoint2: CGPoint(x: 16.86, y: 0.9))
                rectangle12.addLine(to: CGPoint(x: 16.86, y: 14.86))
                rectangle12.addCurve(to: CGPoint(x: 14.86, y: 16.86), controlPoint1: CGPoint(x: 16.86, y: 15.97), controlPoint2: CGPoint(x: 15.97, y: 16.86))
                rectangle12.addLine(to: CGPoint(x: 2, y: 16.86))
                rectangle12.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.9, y: 16.86), controlPoint2: CGPoint(x: 0, y: 15.97))
                rectangle12.addLine(to: CGPoint(x: 0, y: 2))
                rectangle12.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
                rectangle12.close()
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                rectangle12.usesEvenOddFillRule = true
                UIColor.black.setFill()
                rectangle12.fill()
                rectangle12.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                rectangle12.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Human Icon
            do {
                context.saveGState()
                context.translateBy(x: 319.55, y: 12.72)
                
                /// Ellipse
                let ellipse = UIBezierPath()
                ellipse.move(to: CGPoint(x: 0, y: 4.24))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 0), controlPoint1: CGPoint(x: 0, y: 1.9), controlPoint2: CGPoint(x: 1.9, y: 0))
                ellipse.addCurve(to: CGPoint(x: 8.48, y: 4.24), controlPoint1: CGPoint(x: 6.58, y: 0), controlPoint2: CGPoint(x: 8.48, y: 1.9))
                ellipse.addCurve(to: CGPoint(x: 4.24, y: 8.48), controlPoint1: CGPoint(x: 8.48, y: 6.58), controlPoint2: CGPoint(x: 6.58, y: 8.48))
                ellipse.addCurve(to: CGPoint(x: 0, y: 4.24), controlPoint1: CGPoint(x: 1.9, y: 8.48), controlPoint2: CGPoint(x: 0, y: 6.58))
                ellipse.close()
                context.saveGState()
                context.translateBy(x: 8.48, y: 3.3)
                ellipse.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse.stroke()
                context.restoreGState()
                
                /// Ellipse 2
                let ellipse2 = UIBezierPath()
                ellipse2.move(to: CGPoint(x: 0, y: 7.07))
                ellipse2.addCurve(to: CGPoint(x: 7.07, y: 0), controlPoint1: CGPoint(x: 0, y: 3.17), controlPoint2: CGPoint(x: 3.17, y: 0))
                ellipse2.addCurve(to: CGPoint(x: 14.14, y: 7.07), controlPoint1: CGPoint(x: 10.97, y: 0), controlPoint2: CGPoint(x: 14.14, y: 3.17))
                ellipse2.addCurve(to: CGPoint(x: 0, y: 7.07), controlPoint1: CGPoint(x: 14.14, y: 10.97), controlPoint2: CGPoint(x: 0, y: 10.97))
                ellipse2.close()
                context.saveGState()
                context.translateBy(x: 5.66, y: 11.78)
                ellipse2.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse2.stroke()
                context.restoreGState()
                
                /// Ellipse 3
                let ellipse3 = UIBezierPath()
                ellipse3.move(to: CGPoint(x: 0, y: 12.72))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 0), controlPoint1: CGPoint(x: 0, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 0))
                ellipse3.addCurve(to: CGPoint(x: 25.45, y: 12.72), controlPoint1: CGPoint(x: 19.75, y: 0), controlPoint2: CGPoint(x: 25.45, y: 5.7))
                ellipse3.addCurve(to: CGPoint(x: 12.72, y: 25.45), controlPoint1: CGPoint(x: 25.45, y: 19.75), controlPoint2: CGPoint(x: 19.75, y: 25.45))
                ellipse3.addCurve(to: CGPoint(x: 0, y: 12.72), controlPoint1: CGPoint(x: 5.7, y: 25.45), controlPoint2: CGPoint(x: 0, y: 19.75))
                ellipse3.close()
                context.saveGState()
                ellipse3.lineWidth = 1
                UIColor(white: 0.502, alpha: 1).setStroke()
                ellipse3.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// BottomBar
            let bottomBar = UIBezierPath()
            bottomBar.move(to: CGPoint(x: 1.5, y: 0))
            bottomBar.addLine(to: CGPoint(x: 139.5, y: 0))
            bottomBar.addCurve(to: CGPoint(x: 141, y: 1.5), controlPoint1: CGPoint(x: 140.33, y: 0), controlPoint2: CGPoint(x: 141, y: 0.67))
            bottomBar.addCurve(to: CGPoint(x: 139.5, y: 3), controlPoint1: CGPoint(x: 141, y: 2.33), controlPoint2: CGPoint(x: 140.33, y: 3))
            bottomBar.addLine(to: CGPoint(x: 1.5, y: 3))
            bottomBar.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.67, y: 3), controlPoint2: CGPoint(x: 0, y: 2.33))
            bottomBar.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            bottomBar.close()
            context.saveGState()
            context.translateBy(x: 132, y: 70)
            bottomBar.usesEvenOddFillRule = true
            UIColor(white: 0.827, alpha: 0.41).setFill()
            bottomBar.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLanding(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 812), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 812), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 812)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 414, y: 0))
        rectangle.addLine(to: CGPoint(x: 414, y: 896))
        rectangle.addLine(to: CGPoint(x: 0, y: 896))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: -19, y: -42)
        rectangle.usesEvenOddFillRule = true
        UIColor.black.setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// PicassoX_Logo_Final (2)
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    /// Symbols
    
    class func drawPlus2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 8.88, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 8.88, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 8.88, y: resizedFrame.height / 10)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// New shape
        let newShape = UIBezierPath()
        newShape.move(to: CGPoint.zero)
        newShape.addLine(to: CGPoint(x: 7.87, y: 0))
        context.saveGState()
        context.translateBy(x: 0.5, y: 4.44)
        newShape.lineWidth = 1
        UIColor(white: 0.502, alpha: 1).setStroke()
        newShape.stroke()
        context.restoreGState()
        
        /// New shape 2
        let newShape2 = UIBezierPath()
        newShape2.move(to: CGPoint.zero)
        newShape2.addLine(to: CGPoint(x: 0, y: 9))
        context.saveGState()
        context.translateBy(x: 4.37, y: 0.5)
        newShape2.lineWidth = 1
        UIColor(white: 0.502, alpha: 1).setStroke()
        newShape2.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTopBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 339.66, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 339.66, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 339.66, y: resizedFrame.height / 20)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Battery
        do {
            context.saveGState()
            context.translateBy(x: 315.33, y: 3)
            
            /// Border
            let border = UIBezierPath()
            border.move(to: CGPoint(x: 2.67, y: 0))
            border.addLine(to: CGPoint(x: 19.33, y: 0))
            border.addCurve(to: CGPoint(x: 22, y: 2.67), controlPoint1: CGPoint(x: 20.81, y: 0), controlPoint2: CGPoint(x: 22, y: 1.19))
            border.addLine(to: CGPoint(x: 22, y: 8.67))
            border.addCurve(to: CGPoint(x: 19.33, y: 11.33), controlPoint1: CGPoint(x: 22, y: 10.14), controlPoint2: CGPoint(x: 20.81, y: 11.33))
            border.addLine(to: CGPoint(x: 2.67, y: 11.33))
            border.addCurve(to: CGPoint(x: 0, y: 8.67), controlPoint1: CGPoint(x: 1.19, y: 11.33), controlPoint2: CGPoint(x: 0, y: 10.14))
            border.addLine(to: CGPoint(x: 0, y: 2.67))
            border.addCurve(to: CGPoint(x: 2.67, y: 0), controlPoint1: CGPoint(x: 0, y: 1.19), controlPoint2: CGPoint(x: 1.19, y: 0))
            border.close()
            context.saveGState()
            context.setAlpha(0.35)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                border.lineWidth = 2
                context.beginPath()
                context.addPath(border.cgPath)
                context.clip(using: .evenOdd)
                UIColor(white: 0.945, alpha: 1).setStroke()
                border.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Cap
            let cap = UIBezierPath()
            cap.move(to: CGPoint.zero)
            cap.addLine(to: CGPoint(x: 0, y: 4))
            cap.addCurve(to: CGPoint(x: 1.33, y: 2), controlPoint1: CGPoint(x: 0.8, y: 3.66), controlPoint2: CGPoint(x: 1.33, y: 2.87))
            cap.addCurve(to: CGPoint.zero, controlPoint1: CGPoint(x: 1.33, y: 1.13), controlPoint2: CGPoint(x: 0.8, y: 0.34))
            context.saveGState()
            context.setAlpha(0.4)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 23, y: 3.67)
                cap.usesEvenOddFillRule = true
                UIColor(white: 0.945, alpha: 1).setFill()
                cap.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Capacity
            let capacity = UIBezierPath()
            capacity.move(to: CGPoint(x: 1.33, y: 0))
            capacity.addLine(to: CGPoint(x: 16.67, y: 0))
            capacity.addCurve(to: CGPoint(x: 18, y: 1.33), controlPoint1: CGPoint(x: 17.4, y: 0), controlPoint2: CGPoint(x: 18, y: 0.6))
            capacity.addLine(to: CGPoint(x: 18, y: 6))
            capacity.addCurve(to: CGPoint(x: 16.67, y: 7.33), controlPoint1: CGPoint(x: 18, y: 6.74), controlPoint2: CGPoint(x: 17.4, y: 7.33))
            capacity.addLine(to: CGPoint(x: 1.33, y: 7.33))
            capacity.addCurve(to: CGPoint(x: 0, y: 6), controlPoint1: CGPoint(x: 0.6, y: 7.33), controlPoint2: CGPoint(x: 0, y: 6.74))
            capacity.addLine(to: CGPoint(x: 0, y: 1.33))
            capacity.addCurve(to: CGPoint(x: 1.33, y: 0), controlPoint1: CGPoint(x: 0, y: 0.6), controlPoint2: CGPoint(x: 0.6, y: 0))
            capacity.close()
            context.saveGState()
            context.translateBy(x: 2, y: 2)
            capacity.usesEvenOddFillRule = true
            UIColor(white: 0.945, alpha: 1).setFill()
            capacity.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Wifi
        let wifi = UIBezierPath()
        wifi.move(to: CGPoint(x: 7.67, y: 2.28))
        wifi.addCurve(to: CGPoint(x: 13.64, y: 4.67), controlPoint1: CGPoint(x: 9.89, y: 2.28), controlPoint2: CGPoint(x: 12.03, y: 3.14))
        wifi.addCurve(to: CGPoint(x: 14.08, y: 4.67), controlPoint1: CGPoint(x: 13.77, y: 4.79), controlPoint2: CGPoint(x: 13.96, y: 4.79))
        wifi.addLine(to: CGPoint(x: 15.24, y: 3.5))
        wifi.addCurve(to: CGPoint(x: 15.33, y: 3.27), controlPoint1: CGPoint(x: 15.3, y: 3.44), controlPoint2: CGPoint(x: 15.33, y: 3.35))
        wifi.addCurve(to: CGPoint(x: 15.24, y: 3.04), controlPoint1: CGPoint(x: 15.33, y: 3.18), controlPoint2: CGPoint(x: 15.3, y: 3.1))
        wifi.addCurve(to: CGPoint(x: 0.1, y: 3.04), controlPoint1: CGPoint(x: 11, y: -1.01), controlPoint2: CGPoint(x: 4.33, y: -1.01))
        wifi.addCurve(to: CGPoint(x: 0, y: 3.27), controlPoint1: CGPoint(x: 0.04, y: 3.1), controlPoint2: CGPoint(x: 0, y: 3.18))
        wifi.addCurve(to: CGPoint(x: 0.09, y: 3.5), controlPoint1: CGPoint(x: -0, y: 3.35), controlPoint2: CGPoint(x: 0.03, y: 3.44))
        wifi.addLine(to: CGPoint(x: 1.25, y: 4.67))
        wifi.addCurve(to: CGPoint(x: 1.69, y: 4.67), controlPoint1: CGPoint(x: 1.37, y: 4.79), controlPoint2: CGPoint(x: 1.57, y: 4.79))
        wifi.addCurve(to: CGPoint(x: 7.67, y: 2.28), controlPoint1: CGPoint(x: 3.3, y: 3.14), controlPoint2: CGPoint(x: 5.44, y: 2.28))
        wifi.addLine(to: CGPoint(x: 7.67, y: 2.28))
        wifi.close()
        wifi.move(to: CGPoint(x: 7.67, y: 6.09))
        wifi.addCurve(to: CGPoint(x: 10.97, y: 7.37), controlPoint1: CGPoint(x: 8.89, y: 6.09), controlPoint2: CGPoint(x: 10.07, y: 6.55))
        wifi.addCurve(to: CGPoint(x: 11.41, y: 7.36), controlPoint1: CGPoint(x: 11.1, y: 7.48), controlPoint2: CGPoint(x: 11.29, y: 7.48))
        wifi.addLine(to: CGPoint(x: 12.57, y: 6.19))
        wifi.addCurve(to: CGPoint(x: 12.66, y: 5.96), controlPoint1: CGPoint(x: 12.63, y: 6.13), controlPoint2: CGPoint(x: 12.66, y: 6.04))
        wifi.addCurve(to: CGPoint(x: 12.56, y: 5.73), controlPoint1: CGPoint(x: 12.66, y: 5.87), controlPoint2: CGPoint(x: 12.63, y: 5.79))
        wifi.addCurve(to: CGPoint(x: 2.77, y: 5.73), controlPoint1: CGPoint(x: 9.8, y: 3.16), controlPoint2: CGPoint(x: 5.53, y: 3.16))
        wifi.addCurve(to: CGPoint(x: 2.67, y: 5.96), controlPoint1: CGPoint(x: 2.71, y: 5.79), controlPoint2: CGPoint(x: 2.67, y: 5.87))
        wifi.addCurve(to: CGPoint(x: 2.77, y: 6.19), controlPoint1: CGPoint(x: 2.67, y: 6.05), controlPoint2: CGPoint(x: 2.71, y: 6.13))
        wifi.addLine(to: CGPoint(x: 3.93, y: 7.36))
        wifi.addCurve(to: CGPoint(x: 4.36, y: 7.37), controlPoint1: CGPoint(x: 4.05, y: 7.48), controlPoint2: CGPoint(x: 4.24, y: 7.48))
        wifi.addCurve(to: CGPoint(x: 7.67, y: 6.09), controlPoint1: CGPoint(x: 5.27, y: 6.55), controlPoint2: CGPoint(x: 6.45, y: 6.09))
        wifi.addLine(to: CGPoint(x: 7.67, y: 6.09))
        wifi.close()
        wifi.move(to: CGPoint(x: 9.89, y: 8.89))
        wifi.addCurve(to: CGPoint(x: 9.99, y: 8.65), controlPoint1: CGPoint(x: 9.96, y: 8.82), controlPoint2: CGPoint(x: 9.99, y: 8.74))
        wifi.addCurve(to: CGPoint(x: 9.89, y: 8.43), controlPoint1: CGPoint(x: 9.99, y: 8.57), controlPoint2: CGPoint(x: 9.95, y: 8.48))
        wifi.addCurve(to: CGPoint(x: 5.45, y: 8.43), controlPoint1: CGPoint(x: 8.6, y: 7.34), controlPoint2: CGPoint(x: 6.73, y: 7.34))
        wifi.addCurve(to: CGPoint(x: 5.34, y: 8.65), controlPoint1: CGPoint(x: 5.38, y: 8.48), controlPoint2: CGPoint(x: 5.35, y: 8.57))
        wifi.addCurve(to: CGPoint(x: 5.44, y: 8.89), controlPoint1: CGPoint(x: 5.34, y: 8.74), controlPoint2: CGPoint(x: 5.38, y: 8.82))
        wifi.addLine(to: CGPoint(x: 7.44, y: 10.91))
        wifi.addCurve(to: CGPoint(x: 7.67, y: 11), controlPoint1: CGPoint(x: 7.5, y: 10.97), controlPoint2: CGPoint(x: 7.58, y: 11))
        wifi.addCurve(to: CGPoint(x: 7.89, y: 10.91), controlPoint1: CGPoint(x: 7.75, y: 11), controlPoint2: CGPoint(x: 7.83, y: 10.97))
        wifi.addLine(to: CGPoint(x: 9.89, y: 8.89))
        wifi.close()
        context.saveGState()
        context.translateBy(x: 295, y: 3)
        wifi.usesEvenOddFillRule = true
        UIColor(white: 0.945, alpha: 1).setFill()
        wifi.fill()
        context.restoreGState()
        
        /// Cellular Connection
        let cellularConnection = UIBezierPath()
        cellularConnection.move(to: CGPoint(x: 1, y: 6.67))
        cellularConnection.addLine(to: CGPoint(x: 2, y: 6.67))
        cellularConnection.addCurve(to: CGPoint(x: 3, y: 7.67), controlPoint1: CGPoint(x: 2.55, y: 6.67), controlPoint2: CGPoint(x: 3, y: 7.11))
        cellularConnection.addLine(to: CGPoint(x: 3, y: 9.67))
        cellularConnection.addCurve(to: CGPoint(x: 2, y: 10.67), controlPoint1: CGPoint(x: 3, y: 10.22), controlPoint2: CGPoint(x: 2.55, y: 10.67))
        cellularConnection.addLine(to: CGPoint(x: 1, y: 10.67))
        cellularConnection.addCurve(to: CGPoint(x: 0, y: 9.67), controlPoint1: CGPoint(x: 0.45, y: 10.67), controlPoint2: CGPoint(x: 0, y: 10.22))
        cellularConnection.addLine(to: CGPoint(x: 0, y: 7.67))
        cellularConnection.addCurve(to: CGPoint(x: 1, y: 6.67), controlPoint1: CGPoint(x: 0, y: 7.11), controlPoint2: CGPoint(x: 0.45, y: 6.67))
        cellularConnection.addLine(to: CGPoint(x: 1, y: 6.67))
        cellularConnection.close()
        cellularConnection.move(to: CGPoint(x: 5.67, y: 4.67))
        cellularConnection.addLine(to: CGPoint(x: 6.67, y: 4.67))
        cellularConnection.addCurve(to: CGPoint(x: 7.67, y: 5.67), controlPoint1: CGPoint(x: 7.22, y: 4.67), controlPoint2: CGPoint(x: 7.67, y: 5.11))
        cellularConnection.addLine(to: CGPoint(x: 7.67, y: 9.67))
        cellularConnection.addCurve(to: CGPoint(x: 6.67, y: 10.67), controlPoint1: CGPoint(x: 7.67, y: 10.22), controlPoint2: CGPoint(x: 7.22, y: 10.67))
        cellularConnection.addLine(to: CGPoint(x: 5.67, y: 10.67))
        cellularConnection.addCurve(to: CGPoint(x: 4.67, y: 9.67), controlPoint1: CGPoint(x: 5.11, y: 10.67), controlPoint2: CGPoint(x: 4.67, y: 10.22))
        cellularConnection.addLine(to: CGPoint(x: 4.67, y: 5.67))
        cellularConnection.addCurve(to: CGPoint(x: 5.67, y: 4.67), controlPoint1: CGPoint(x: 4.67, y: 5.11), controlPoint2: CGPoint(x: 5.11, y: 4.67))
        cellularConnection.close()
        cellularConnection.move(to: CGPoint(x: 10.33, y: 2.33))
        cellularConnection.addLine(to: CGPoint(x: 11.33, y: 2.33))
        cellularConnection.addCurve(to: CGPoint(x: 12.33, y: 3.33), controlPoint1: CGPoint(x: 11.89, y: 2.33), controlPoint2: CGPoint(x: 12.33, y: 2.78))
        cellularConnection.addLine(to: CGPoint(x: 12.33, y: 9.67))
        cellularConnection.addCurve(to: CGPoint(x: 11.33, y: 10.67), controlPoint1: CGPoint(x: 12.33, y: 10.22), controlPoint2: CGPoint(x: 11.89, y: 10.67))
        cellularConnection.addLine(to: CGPoint(x: 10.33, y: 10.67))
        cellularConnection.addCurve(to: CGPoint(x: 9.33, y: 9.67), controlPoint1: CGPoint(x: 9.78, y: 10.67), controlPoint2: CGPoint(x: 9.33, y: 10.22))
        cellularConnection.addLine(to: CGPoint(x: 9.33, y: 3.33))
        cellularConnection.addCurve(to: CGPoint(x: 10.33, y: 2.33), controlPoint1: CGPoint(x: 9.33, y: 2.78), controlPoint2: CGPoint(x: 9.78, y: 2.33))
        cellularConnection.close()
        cellularConnection.move(to: CGPoint(x: 15, y: 0))
        cellularConnection.addLine(to: CGPoint(x: 16, y: 0))
        cellularConnection.addCurve(to: CGPoint(x: 17, y: 1), controlPoint1: CGPoint(x: 16.55, y: 0), controlPoint2: CGPoint(x: 17, y: 0.45))
        cellularConnection.addLine(to: CGPoint(x: 17, y: 9.67))
        cellularConnection.addCurve(to: CGPoint(x: 16, y: 10.67), controlPoint1: CGPoint(x: 17, y: 10.22), controlPoint2: CGPoint(x: 16.55, y: 10.67))
        cellularConnection.addLine(to: CGPoint(x: 15, y: 10.67))
        cellularConnection.addCurve(to: CGPoint(x: 14, y: 9.67), controlPoint1: CGPoint(x: 14.45, y: 10.67), controlPoint2: CGPoint(x: 14, y: 10.22))
        cellularConnection.addLine(to: CGPoint(x: 14, y: 1))
        cellularConnection.addCurve(to: CGPoint(x: 15, y: 0), controlPoint1: CGPoint(x: 14, y: 0.45), controlPoint2: CGPoint(x: 14.45, y: 0))
        cellularConnection.addLine(to: CGPoint(x: 15, y: 0))
        cellularConnection.close()
        context.saveGState()
        context.translateBy(x: 273, y: 3.33)
        cellularConnection.usesEvenOddFillRule = true
        UIColor(white: 0.945, alpha: 1).setFill()
        cellularConnection.fill()
        context.restoreGState()
        
        /// Time Style
        do {
            context.saveGState()
            
            /// Time
            let time = NSMutableAttributedString(string: "9:41")
            time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 15)!, range: NSRange(location: 0, length: time.length))
            time.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: time.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
            }
            time.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: time.length))
            context.saveGState()
            time.draw(in: CGRect(x: 0, y: 0, width: 54, height: 22))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBariPhonexTimeLight(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 54, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 54, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 54, y: resizedFrame.height / 21)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Time
        let time = NSMutableAttributedString(string: "09:41")
        time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 15)!, range: NSRange(location: 0, length: time.length))
        time.addAttribute(.kern, value: -0.3, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        context.saveGState()
        time.draw(in: CGRect(x: 0, y: 7, width: 54, height: 22))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCityscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 24)
        
        /// Rectangle Copy 6
        let rectangleCopy6 = UIBezierPath()
        rectangleCopy6.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy6.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy6.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy6.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy6.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy6.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy6.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy6.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy6.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy6.close()
        context.saveGState()
        rectangleCopy6.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy6.cgPath)
        context.addRect(rectangleCopy6.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -75, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 75, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy6.fill()
        context.restoreGState()
        rectangleCopy6.usesEvenOddFillRule = true
        UIColor(hue: 0.506, saturation: 0.217, brightness: 0.976, alpha: 1).setFill()
        rectangleCopy6.fill()
        context.restoreGState()
        
        /// Cityscape
        let cityscape2 = NSMutableAttributedString(string: "Cityscape")
        cityscape2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 8)!, range: NSRange(location: 0, length: cityscape2.length))
        cityscape2.addAttribute(.kern, value: 0.1, range: NSRange(location: 0, length: cityscape2.length))
        cityscape2.addAttribute(.foregroundColor, value: UIColor(white: 0.247, alpha: 1), range: NSRange(location: 0, length: cityscape2.length))
        context.saveGState()
        cityscape2.draw(at: CGPoint(x: 28, y: 6.67))
        context.restoreGState()
        
        /// cityscape
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawPortrait(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 24)
        
        /// Rectangle Copy 5
        let rectangleCopy5 = UIBezierPath()
        rectangleCopy5.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy5.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy5.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy5.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy5.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy5.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy5.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy5.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy5.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy5.close()
        context.saveGState()
        rectangleCopy5.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy5.cgPath)
        context.addRect(rectangleCopy5.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -75, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 75, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy5.fill()
        context.restoreGState()
        rectangleCopy5.usesEvenOddFillRule = true
        UIColor(hue: 0.252, saturation: 0.424, brightness: 1, alpha: 1).setFill()
        rectangleCopy5.fill()
        context.restoreGState()
        
        /// Portrait
        let portrait2 = NSMutableAttributedString(string: "Portrait")
        portrait2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 8)!, range: NSRange(location: 0, length: portrait2.length))
        portrait2.addAttribute(.kern, value: 0.1, range: NSRange(location: 0, length: portrait2.length))
        portrait2.addAttribute(.foregroundColor, value: UIColor(white: 0.247, alpha: 1), range: NSRange(location: 0, length: portrait2.length))
        context.saveGState()
        portrait2.draw(at: CGPoint(x: 28, y: 6.67))
        context.restoreGState()
        
        /// 175062
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawLandscape(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 24)
        
        /// Rectangle Copy 4
        let rectangleCopy4 = UIBezierPath()
        rectangleCopy4.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy4.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy4.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy4.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy4.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy4.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy4.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy4.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy4.close()
        context.saveGState()
        rectangleCopy4.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy4.cgPath)
        context.addRect(rectangleCopy4.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -75, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 75, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy4.fill()
        context.restoreGState()
        rectangleCopy4.usesEvenOddFillRule = true
        UIColor(hue: 0.002, saturation: 0.267, brightness: 1, alpha: 1).setFill()
        rectangleCopy4.fill()
        context.restoreGState()
        
        /// Landscape
        let landscape2 = NSMutableAttributedString(string: "Landscape")
        landscape2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 8)!, range: NSRange(location: 0, length: landscape2.length))
        landscape2.addAttribute(.kern, value: 0.1, range: NSRange(location: 0, length: landscape2.length))
        landscape2.addAttribute(.foregroundColor, value: UIColor(white: 0.247, alpha: 1), range: NSRange(location: 0, length: landscape2.length))
        context.saveGState()
        landscape2.draw(at: CGPoint(x: 23, y: 6.67))
        context.restoreGState()
        
        /// 26-512
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawStilllife(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 71, height: 29), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 71, height: 29), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 71, y: resizedFrame.height / 29)
        
        /// Rectangle Copy 7
        let rectangleCopy7 = UIBezierPath()
        rectangleCopy7.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy7.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy7.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy7.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy7.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy7.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy7.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy7.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy7.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy7.close()
        context.saveGState()
        context.translateBy(x: 1, y: 3)
        rectangleCopy7.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy7.cgPath)
        context.addRect(rectangleCopy7.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -75, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 75, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy7.fill()
        context.restoreGState()
        rectangleCopy7.usesEvenOddFillRule = true
        UIColor(hue: 0.716, saturation: 0.374, brightness: 0.965, alpha: 1).setFill()
        rectangleCopy7.fill()
        context.restoreGState()
        
        /// Still-life
        let stilllife2 = NSMutableAttributedString(string: "Still-life")
        stilllife2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 8)!, range: NSRange(location: 0, length: stilllife2.length))
        stilllife2.addAttribute(.kern, value: 0.1, range: NSRange(location: 0, length: stilllife2.length))
        stilllife2.addAttribute(.foregroundColor, value: UIColor(white: 0.247, alpha: 1), range: NSRange(location: 0, length: stilllife2.length))
        context.saveGState()
        stilllife2.draw(at: CGPoint(x: 26, y: 10))
        context.restoreGState()
        
        /// 207-512
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawNature(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 24)
        
        /// Rectangle Copy 8
        let rectangleCopy8 = UIBezierPath()
        rectangleCopy8.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy8.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy8.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy8.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy8.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy8.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy8.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy8.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy8.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy8.close()
        context.saveGState()
        rectangleCopy8.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy8.cgPath)
        context.addRect(rectangleCopy8.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -75, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 75, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy8.fill()
        context.restoreGState()
        rectangleCopy8.usesEvenOddFillRule = true
        UIColor(hue: 0.859, saturation: 0.231, brightness: 0.984, alpha: 1).setFill()
        rectangleCopy8.fill()
        context.restoreGState()
        
        /// Nature
        let nature2 = NSMutableAttributedString(string: "Nature")
        nature2.addAttribute(.font, value: UIFont(name: "Helvetica", size: 8)!, range: NSRange(location: 0, length: nature2.length))
        nature2.addAttribute(.kern, value: 0.1, range: NSRange(location: 0, length: nature2.length))
        nature2.addAttribute(.foregroundColor, value: UIColor(white: 0.247, alpha: 1), range: NSRange(location: 0, length: nature2.length))
        context.saveGState()
        nature2.draw(at: CGPoint(x: 28, y: 7))
        context.restoreGState()
        
        /// icon_leaf-leaves-double-01-512
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawTags(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 70, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 70, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 70, y: resizedFrame.height / 24)
        
        /// Rectangle Copy 4
        let rectangleCopy4 = UIBezierPath()
        rectangleCopy4.move(to: CGPoint(x: 4, y: 0))
        rectangleCopy4.addLine(to: CGPoint(x: 66, y: 0))
        rectangleCopy4.addCurve(to: CGPoint(x: 70, y: 4), controlPoint1: CGPoint(x: 68.21, y: 0), controlPoint2: CGPoint(x: 70, y: 1.79))
        rectangleCopy4.addLine(to: CGPoint(x: 70, y: 19.33))
        rectangleCopy4.addCurve(to: CGPoint(x: 66, y: 23.33), controlPoint1: CGPoint(x: 70, y: 21.54), controlPoint2: CGPoint(x: 68.21, y: 23.33))
        rectangleCopy4.addLine(to: CGPoint(x: 4, y: 23.33))
        rectangleCopy4.addCurve(to: CGPoint(x: 0, y: 19.33), controlPoint1: CGPoint(x: 1.79, y: 23.33), controlPoint2: CGPoint(x: 0, y: 21.54))
        rectangleCopy4.addLine(to: CGPoint(x: 0, y: 4))
        rectangleCopy4.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 0, y: 1.79), controlPoint2: CGPoint(x: 1.79, y: 0))
        rectangleCopy4.close()
        context.saveGState()
        rectangleCopy4.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy4.cgPath)
        context.addRect(rectangleCopy4.bounds.insetBy(dx: -6, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -77, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 79, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy4.fill()
        context.restoreGState()
        rectangleCopy4.usesEvenOddFillRule = true
        UIColor(hue: 0.002, saturation: 0.267, brightness: 1, alpha: 1).setFill()
        rectangleCopy4.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawPlus(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 22, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 22, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 22, y: resizedFrame.height / 22)
        
        /// Path 2
        let path2 = UIBezierPath()
        path2.move(to: CGPoint.zero)
        path2.addLine(to: CGPoint(x: 21, y: 0))
        context.saveGState()
        context.translateBy(x: 0, y: 9.5)
        path2.lineWidth = 2
        UIColor.white.setStroke()
        path2.stroke()
        context.restoreGState()
        
        /// Path 3
        let path3 = UIBezierPath()
        path3.move(to: CGPoint.zero)
        path3.addLine(to: CGPoint(x: 0, y: 21.5))
        context.saveGState()
        context.translateBy(x: 10.5, y: 0)
        path3.lineWidth = 2
        UIColor.white.setStroke()
        path3.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCamera2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 22), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 22), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 22)
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 20, y: 0))
        rectangle.addLine(to: CGPoint(x: 20, y: 20))
        rectangle.addLine(to: CGPoint(x: 0, y: 20))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 0, y: 2)
        rectangle.lineWidth = 2
        UIColor(white: 0.969, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 4, y: 8))
        oval.addCurve(to: CGPoint(x: 8, y: 4), controlPoint1: CGPoint(x: 6.21, y: 8), controlPoint2: CGPoint(x: 8, y: 6.21))
        oval.addCurve(to: CGPoint(x: 4, y: 0), controlPoint1: CGPoint(x: 8, y: 1.79), controlPoint2: CGPoint(x: 6.21, y: 0))
        oval.addCurve(to: CGPoint(x: 0, y: 4), controlPoint1: CGPoint(x: 1.79, y: 0), controlPoint2: CGPoint(x: 0, y: 1.79))
        oval.addCurve(to: CGPoint(x: 4, y: 8), controlPoint1: CGPoint(x: 0, y: 6.21), controlPoint2: CGPoint(x: 1.79, y: 8))
        oval.close()
        context.saveGState()
        context.translateBy(x: 6, y: 8)
        oval.lineWidth = 2
        UIColor.white.setStroke()
        oval.stroke()
        context.restoreGState()
        
        /// Rectangle
        let rectangle3 = UIBezierPath()
        rectangle3.move(to: CGPoint.zero)
        rectangle3.addLine(to: CGPoint(x: 4, y: 0))
        rectangle3.addLine(to: CGPoint(x: 4, y: 2))
        rectangle3.addLine(to: CGPoint(x: 0, y: 2))
        rectangle3.addLine(to: CGPoint.zero)
        rectangle3.close()
        context.saveGState()
        context.translateBy(x: 3, y: 0)
        rectangle3.usesEvenOddFillRule = true
        UIColor.white.setFill()
        rectangle3.fill()
        context.restoreGState()
        
        /// Oval
        let oval2 = UIBezierPath()
        oval2.move(to: CGPoint(x: 1, y: 2))
        oval2.addCurve(to: CGPoint(x: 2, y: 1), controlPoint1: CGPoint(x: 1.55, y: 2), controlPoint2: CGPoint(x: 2, y: 1.55))
        oval2.addCurve(to: CGPoint(x: 1, y: 0), controlPoint1: CGPoint(x: 2, y: 0.45), controlPoint2: CGPoint(x: 1.55, y: 0))
        oval2.addCurve(to: CGPoint(x: 0, y: 1), controlPoint1: CGPoint(x: 0.45, y: 0), controlPoint2: CGPoint(x: 0, y: 0.45))
        oval2.addCurve(to: CGPoint(x: 1, y: 2), controlPoint1: CGPoint(x: 0, y: 1.55), controlPoint2: CGPoint(x: 0.45, y: 2))
        oval2.close()
        context.saveGState()
        context.translateBy(x: 14, y: 5)
        oval2.usesEvenOddFillRule = true
        UIColor.white.setFill()
        oval2.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfIPhoneXS() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawIPhoneXS()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSave() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawSave()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfDetail() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1284), false, 0)
        Picasso_1.drawDetail()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFiltered() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1036), false, 0)
        Picasso_1.drawFiltered()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFilters() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1000), false, 0)
        Picasso_1.drawFilters()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFiltersCopy2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1087), false, 0)
        Picasso_1.drawFiltersCopy2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFiltersCopy3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1087), false, 0)
        Picasso_1.drawFiltersCopy3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFiltersCopy() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1000), false, 0)
        Picasso_1.drawFiltersCopy()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRoll2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawRoll2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRoll() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawRoll()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCamera() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawCamera()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfGallery() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 1304), false, 0)
        Picasso_1.drawGallery()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLanding() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 812), false, 0)
        Picasso_1.drawLanding()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Symbols
    
    class func imageOfPlus2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 8.88, height: 10), false, 0)
        Picasso_1.drawPlus2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTopBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 339.66, height: 20), false, 0)
        Picasso_1.drawTopBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBariPhonexTimeLight() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 54, height: 21), false, 0)
        Picasso_1.drawBarsStatusBariPhonexTimeLight()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCityscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 24), false, 0)
        Picasso_1.drawCityscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPortrait() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 24), false, 0)
        Picasso_1.drawPortrait()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLandscape() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 24), false, 0)
        Picasso_1.drawLandscape()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfStilllife() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 71, height: 29), false, 0)
        Picasso_1.drawStilllife()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNature() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 24), false, 0)
        Picasso_1.drawNature()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTags() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 70, height: 24), false, 0)
        Picasso_1.drawTags()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPlus() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 22, height: 22), false, 0)
        Picasso_1.drawPlus()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCamera2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 22), false, 0)
        Picasso_1.drawCamera2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
